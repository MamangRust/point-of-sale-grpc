// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    merchant_id,
    payment_method,
    amount,
    change_amount,
    payment_status,
    order_id,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    NULL
)
RETURNING transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	OrderID       int32         `json:"order_id"`
}

// CreateTransaction: Creates a new transaction record
// Purpose: Record a new payment transaction
// Parameters:
//
//	$1: merchant_id - Merchant reference
//	$2: payment_method - Payment method used
//	$3: amount - Transaction amount
//	$4: change_amount - Change amount (if applicable)
//	$5: payment_status - Payment status ('success', 'failed', 'pending')
//	$6: order_id - Associated order reference
//
// Returns: Newly created transaction record
// Business Logic:
//   - Sets created_at and updated_at timestamps
//   - Initializes deleted_at as NULL
//   - Validates all payment fields
//   - Used for recording new payments
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.MerchantID,
		arg.PaymentMethod,
		arg.Amount,
		arg.ChangeAmount,
		arg.PaymentStatus,
		arg.OrderID,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentTransactions = `-- name: DeleteAllPermanentTransactions :exec
DELETE FROM transactions WHERE deleted_at IS NOT NULL
`

// DeleteAllPermanentTransactions: Purges all cancelled transactions
// Purpose: Clean up all soft-deleted transaction records
// Business Logic:
//   - Irreversible bulk deletion operation
//   - Only affects already cancelled transactions
//   - Typically used during database maintenance
//   - Should be restricted to admin users
func (q *Queries) DeleteAllPermanentTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentTransactions)
	return err
}

const deleteTransactionPermanently = `-- name: DeleteTransactionPermanently :exec
DELETE FROM transactions
WHERE
    transaction_id = $1
    AND deleted_at IS NOT NULL
`

// DeleteTransactionPermanently: Hard-deletes a transaction
// Purpose: Completely remove transaction from database
// Parameters:
//
//	$1: transaction_id - ID of transaction to delete
//
// Business Logic:
//   - Permanent deletion of already cancelled transactions
//   - No return value (exec-only operation)
//   - Irreversible action - use with caution
//   - Should be restricted to admin users
func (q *Queries) DeleteTransactionPermanently(ctx context.Context, transactionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionPermanently, transactionID)
	return err
}

const getMonthlyAmountTransactionFailed = `-- name: GetMonthlyAmountTransactionFailed :many
WITH
    monthly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            EXTRACT(
                MONTH
                FROM t.created_at
            )::integer AS month,
            COUNT(*) AS total_failed,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND (
                (
                    t.created_at >= $1::timestamp
                    AND t.created_at <= $2::timestamp
                )
                OR (
                    t.created_at >= $3::timestamp
                    AND t.created_at <= $4::timestamp
                )
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            ),
            EXTRACT(
                MONTH
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            TO_CHAR(
                TO_DATE(month::text, 'MM'),
                'Mon'
            ) AS month,
            total_failed,
            total_amount
        FROM monthly_data
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $1::timestamp
            )::text AS year,
            TO_CHAR($1::timestamp, 'Mon') AS month,
            0 AS total_failed,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $1::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $1::timestamp
                    )::integer
            )
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $3::timestamp
            )::text AS year,
            TO_CHAR($3::timestamp, 'Mon') AS month,
            0 AS total_failed,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $3::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $3::timestamp
                    )::integer
            )
    )
SELECT year, month, total_failed, total_amount
FROM formatted_data
ORDER BY year DESC, TO_DATE(month, 'Mon') DESC
`

type GetMonthlyAmountTransactionFailedParams struct {
	Column1 time.Time `json:"column_1"`
	Column2 time.Time `json:"column_2"`
	Column3 time.Time `json:"column_3"`
	Column4 time.Time `json:"column_4"`
}

type GetMonthlyAmountTransactionFailedRow struct {
	Year        string `json:"year"`
	Month       string `json:"month"`
	TotalFailed int64  `json:"total_failed"`
	TotalAmount int32  `json:"total_amount"`
}

// GetMonthlyAmountTransactionFailed: Retrieves monthly failed transaction metrics
// Purpose: Generate monthly reports of failed transactions for analysis
// Parameters:
//
//	$1: Start date of first comparison period (timestamp)
//	$2: End date of first comparison period (timestamp)
//	$3: Start date of second comparison period (timestamp)
//	$4: End date of second comparison period (timestamp)
//
// Returns:
//
//	year: Year as text
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	total_failed: Count of failed transactions
//	total_amount: Sum of failed transaction amounts
//
// Business Logic:
//   - Only includes failed (payment_status = 'failed') transactions
//   - Excludes deleted transactions
//   - Compares two customizable time periods
//   - Includes gap-filling for months with no failed transactions
//   - Returns 0 values for months with no failed transactions
//   - Orders by most recent year/month first
func (q *Queries) GetMonthlyAmountTransactionFailed(ctx context.Context, arg GetMonthlyAmountTransactionFailedParams) ([]*GetMonthlyAmountTransactionFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyAmountTransactionFailed,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyAmountTransactionFailedRow
	for rows.Next() {
		var i GetMonthlyAmountTransactionFailedRow
		if err := rows.Scan(
			&i.Year,
			&i.Month,
			&i.TotalFailed,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyAmountTransactionFailedByMerchant = `-- name: GetMonthlyAmountTransactionFailedByMerchant :many
WITH
    monthly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            EXTRACT(
                MONTH
                FROM t.created_at
            )::integer AS month,
            COUNT(*) AS total_failed,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND t.merchant_id = $5
            AND (
                (
                    t.created_at >= $1::timestamp
                    AND t.created_at <= $2::timestamp
                )
                OR (
                    t.created_at >= $3::timestamp
                    AND t.created_at <= $4::timestamp
                )
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            ),
            EXTRACT(
                MONTH
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            TO_CHAR(
                TO_DATE(month::text, 'MM'),
                'Mon'
            ) AS month,
            total_failed,
            total_amount
        FROM monthly_data
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $1::timestamp
            )::text AS year,
            TO_CHAR($1::timestamp, 'Mon') AS month,
            0 AS total_failed,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $1::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $1::timestamp
                    )::integer
            )
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $3::timestamp
            )::text AS year,
            TO_CHAR($3::timestamp, 'Mon') AS month,
            0 AS total_failed,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $3::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $3::timestamp
                    )::integer
            )
    )
SELECT year, month, total_failed, total_amount
FROM formatted_data
ORDER BY year DESC, TO_DATE(month, 'Mon') DESC
`

type GetMonthlyAmountTransactionFailedByMerchantParams struct {
	Column1    time.Time `json:"column_1"`
	Column2    time.Time `json:"column_2"`
	Column3    time.Time `json:"column_3"`
	Column4    time.Time `json:"column_4"`
	MerchantID int32     `json:"merchant_id"`
}

type GetMonthlyAmountTransactionFailedByMerchantRow struct {
	Year        string `json:"year"`
	Month       string `json:"month"`
	TotalFailed int64  `json:"total_failed"`
	TotalAmount int32  `json:"total_amount"`
}

// GetMonthlyAmountTransactionFailedByMerchant: Retrieves monthly failed transaction metrics
// Purpose: Generate monthly reports of failed transactions for analysis by merchant_id
// Parameters:
//
//	$1: Start date of first comparison period (timestamp)
//	$2: End date of first comparison period (timestamp)
//	$3: Start date of second comparison period (timestamp)
//	$4: End date of second comparison period (timestamp)
//	$5: Merchant ID
//
// Returns:
//
//	year: Year as text
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	total_failed: Count of failed transactions
//	total_amount: Sum of failed transaction amounts
//
// Business Logic:
//   - Only includes failed (payment_status = 'failed') transactions
//   - Excludes deleted transactions
//   - Compares two customizable time periods
//   - Includes gap-filling for months with no failed transactions
//   - Returns 0 values for months with no failed transactions
//   - Orders by most recent year/month first
func (q *Queries) GetMonthlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionFailedByMerchantParams) ([]*GetMonthlyAmountTransactionFailedByMerchantRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyAmountTransactionFailedByMerchant,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.MerchantID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyAmountTransactionFailedByMerchantRow
	for rows.Next() {
		var i GetMonthlyAmountTransactionFailedByMerchantRow
		if err := rows.Scan(
			&i.Year,
			&i.Month,
			&i.TotalFailed,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyAmountTransactionSuccess = `-- name: GetMonthlyAmountTransactionSuccess :many
WITH
    monthly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            EXTRACT(
                MONTH
                FROM t.created_at
            )::integer AS month,
            COUNT(*) AS total_success,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND (
                (
                    t.created_at >= $1::timestamp
                    AND t.created_at <= $2::timestamp
                )
                OR (
                    t.created_at >= $3::timestamp
                    AND t.created_at <= $4::timestamp
                )
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            ),
            EXTRACT(
                MONTH
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            TO_CHAR(
                TO_DATE(month::text, 'MM'),
                'Mon'
            ) AS month,
            total_success,
            total_amount
        FROM monthly_data
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $1::timestamp
            )::text AS year,
            TO_CHAR($1::timestamp, 'Mon') AS month,
            0 AS total_success,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $1::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $1::timestamp
                    )::integer
            )
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $3::timestamp
            )::text AS year,
            TO_CHAR($3::timestamp, 'Mon') AS month,
            0 AS total_success,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $3::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $3::timestamp
                    )::integer
            )
    )
SELECT year, month, total_success, total_amount
FROM formatted_data
ORDER BY year DESC, TO_DATE(month, 'Mon') DESC
`

type GetMonthlyAmountTransactionSuccessParams struct {
	Column1 time.Time `json:"column_1"`
	Column2 time.Time `json:"column_2"`
	Column3 time.Time `json:"column_3"`
	Column4 time.Time `json:"column_4"`
}

type GetMonthlyAmountTransactionSuccessRow struct {
	Year         string `json:"year"`
	Month        string `json:"month"`
	TotalSuccess int64  `json:"total_success"`
	TotalAmount  int32  `json:"total_amount"`
}

// GetMonthlyAmountTransactionSuccess: Retrieves monthly success transaction metrics
// Purpose: Generate monthly reports of successful transactions for analysis
// Parameters:
//
//	$1: Start date of first comparison period (timestamp)
//	$2: End date of first comparison period (timestamp)
//	$3: Start date of second comparison period (timestamp)
//	$4: End date of second comparison period (timestamp)
//
// Returns:
//
//	year: Year as text
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	total_success: Count of successful transactions
//	total_amount: Sum of successful transaction amounts
//
// Business Logic:
//   - Only includes successful (payment_status = 'success') transactions
//   - Excludes deleted transactions
//   - Compares two customizable time periods
//   - Includes gap-filling for months with no transactions
//   - Returns 0 values for months with no successful transactions
//   - Orders by most recent year/month first
func (q *Queries) GetMonthlyAmountTransactionSuccess(ctx context.Context, arg GetMonthlyAmountTransactionSuccessParams) ([]*GetMonthlyAmountTransactionSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyAmountTransactionSuccess,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyAmountTransactionSuccessRow
	for rows.Next() {
		var i GetMonthlyAmountTransactionSuccessRow
		if err := rows.Scan(
			&i.Year,
			&i.Month,
			&i.TotalSuccess,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyAmountTransactionSuccessByMerchant = `-- name: GetMonthlyAmountTransactionSuccessByMerchant :many
WITH
    monthly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            EXTRACT(
                MONTH
                FROM t.created_at
            )::integer AS month,
            COUNT(*) AS total_success,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND t.merchant_id = $5
            AND (
                (
                    t.created_at >= $1::timestamp
                    AND t.created_at <= $2::timestamp
                )
                OR (
                    t.created_at >= $3::timestamp
                    AND t.created_at <= $4::timestamp
                )
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            ),
            EXTRACT(
                MONTH
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            TO_CHAR(
                TO_DATE(month::text, 'MM'),
                'Mon'
            ) AS month,
            total_success,
            total_amount
        FROM monthly_data
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $1::timestamp
            )::text AS year,
            TO_CHAR($1::timestamp, 'Mon') AS month,
            0 AS total_success,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $1::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $1::timestamp
                    )::integer
            )
        UNION ALL
        SELECT
            EXTRACT(
                YEAR
                FROM $3::timestamp
            )::text AS year,
            TO_CHAR($3::timestamp, 'Mon') AS month,
            0 AS total_success,
            0 AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM monthly_data
                WHERE
                    year = EXTRACT(
                        YEAR
                        FROM $3::timestamp
                    )::integer
                    AND month = EXTRACT(
                        MONTH
                        FROM $3::timestamp
                    )::integer
            )
    )
SELECT year, month, total_success, total_amount
FROM formatted_data
ORDER BY year DESC, TO_DATE(month, 'Mon') DESC
`

type GetMonthlyAmountTransactionSuccessByMerchantParams struct {
	Column1    time.Time `json:"column_1"`
	Column2    time.Time `json:"column_2"`
	Column3    time.Time `json:"column_3"`
	Column4    time.Time `json:"column_4"`
	MerchantID int32     `json:"merchant_id"`
}

type GetMonthlyAmountTransactionSuccessByMerchantRow struct {
	Year         string `json:"year"`
	Month        string `json:"month"`
	TotalSuccess int64  `json:"total_success"`
	TotalAmount  int32  `json:"total_amount"`
}

// GetMonthlyAmountTransactionSuccessByMerchant: Retrieves monthly success transaction metrics by merchant_id
// Purpose: Generate monthly reports of successful transactions for analysis
// Parameters:
//
//	$1: Start date of first comparison period (timestamp)
//	$2: End date of first comparison period (timestamp)
//	$3: Start date of second comparison period (timestamp)
//	$4: End date of second comparison period (timestamp)
//	$5: Merchant ID
//
// Returns:
//
//	year: Year as text
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	total_success: Count of successful transactions
//	total_amount: Sum of successful transaction amounts
//
// Business Logic:
//   - Only includes successful (payment_status = 'success') transactions
//   - Excludes deleted transactions
//   - Compares two customizable time periods
//   - Includes gap-filling for months with no transactions
//   - Returns 0 values for months with no successful transactions
//   - Orders by most recent year/month first
func (q *Queries) GetMonthlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionSuccessByMerchantParams) ([]*GetMonthlyAmountTransactionSuccessByMerchantRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyAmountTransactionSuccessByMerchant,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.MerchantID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyAmountTransactionSuccessByMerchantRow
	for rows.Next() {
		var i GetMonthlyAmountTransactionSuccessByMerchantRow
		if err := rows.Scan(
			&i.Year,
			&i.Month,
			&i.TotalSuccess,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyTransactionMethodsByMerchantFailed = `-- name: GetMonthlyTransactionMethodsByMerchantFailed :many
WITH
    date_ranges AS (
        SELECT
            $1::timestamp AS range1_start,
            $2::timestamp AS range1_end,
            $3::timestamp AS range2_start,
            $4::timestamp AS range2_end
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_months AS (
        SELECT generate_series(
            date_trunc('month', LEAST(
                (SELECT range1_start FROM date_ranges),
                (SELECT range2_start FROM date_ranges)
            )),
            date_trunc('month', GREATEST(
                (SELECT range1_end FROM date_ranges),
                (SELECT range2_end FROM date_ranges)
            )),
            interval '1 month'
        )::date AS activity_month
    ),
    all_combinations AS (
        SELECT 
            am.activity_month,
            pm.payment_method
        FROM all_months am
        CROSS JOIN payment_methods pm
    ),
    monthly_transactions AS (
        SELECT
            date_trunc('month', t.created_at)::date AS activity_month,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        JOIN date_ranges dr ON (
            t.created_at BETWEEN dr.range1_start AND dr.range1_end
            OR t.created_at BETWEEN dr.range2_start AND dr.range2_end
        )
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND t.merchant_id = $5  
        GROUP BY
            date_trunc('month', t.created_at),
            t.payment_method
    )
SELECT 
    TO_CHAR(ac.activity_month, 'Mon') AS month,
    ac.payment_method,
    COALESCE(mt.total_transactions, 0) AS total_transactions,
    COALESCE(mt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN monthly_transactions mt ON 
    ac.activity_month = mt.activity_month
    AND ac.payment_method = mt.payment_method
ORDER BY 
    ac.activity_month, 
    ac.payment_method
`

type GetMonthlyTransactionMethodsByMerchantFailedParams struct {
	Column1    time.Time `json:"column_1"`
	Column2    time.Time `json:"column_2"`
	Column3    time.Time `json:"column_3"`
	Column4    time.Time `json:"column_4"`
	MerchantID int32     `json:"merchant_id"`
}

type GetMonthlyTransactionMethodsByMerchantFailedRow struct {
	Month             string  `json:"month"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetMonthlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method monthly
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 12-month analysis period
//
// Returns:
//
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	merchant_id: The merchant identifier
//	merchant_name: The merchant's name
//	payment_method: The payment method used
//	total_transactions: Count of failed transactions
//	total_amount: Total amount that failed processing
func (q *Queries) GetMonthlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantFailedParams) ([]*GetMonthlyTransactionMethodsByMerchantFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyTransactionMethodsByMerchantFailed,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.MerchantID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyTransactionMethodsByMerchantFailedRow
	for rows.Next() {
		var i GetMonthlyTransactionMethodsByMerchantFailedRow
		if err := rows.Scan(
			&i.Month,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyTransactionMethodsByMerchantSuccess = `-- name: GetMonthlyTransactionMethodsByMerchantSuccess :many
WITH
    date_ranges AS (
        SELECT
            $1::timestamp AS range1_start,
            $2::timestamp AS range1_end,
            $3::timestamp AS range2_start,
            $4::timestamp AS range2_end
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_months AS (
        SELECT generate_series(
            date_trunc('month', LEAST(
                (SELECT range1_start FROM date_ranges),
                (SELECT range2_start FROM date_ranges)
            )),
            date_trunc('month', GREATEST(
                (SELECT range1_end FROM date_ranges),
                (SELECT range2_end FROM date_ranges)
            )),
            interval '1 month'
        )::date AS activity_month
    ),
    all_combinations AS (
        SELECT 
            am.activity_month,
            pm.payment_method
        FROM all_months am
        CROSS JOIN payment_methods pm
    ),
    monthly_transactions AS (
        SELECT
            date_trunc('month', t.created_at)::date AS activity_month,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        JOIN date_ranges dr ON (
            t.created_at BETWEEN dr.range1_start AND dr.range1_end
            OR t.created_at BETWEEN dr.range2_start AND dr.range2_end
        )
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND t.merchant_id = $5  
        GROUP BY
            date_trunc('month', t.created_at),
            t.payment_method
    )
SELECT 
    TO_CHAR(ac.activity_month, 'Mon') AS month,
    ac.payment_method,
    COALESCE(mt.total_transactions, 0) AS total_transactions,
    COALESCE(mt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN monthly_transactions mt ON 
    ac.activity_month = mt.activity_month
    AND ac.payment_method = mt.payment_method
ORDER BY 
    ac.activity_month, 
    ac.payment_method
`

type GetMonthlyTransactionMethodsByMerchantSuccessParams struct {
	Column1    time.Time `json:"column_1"`
	Column2    time.Time `json:"column_2"`
	Column3    time.Time `json:"column_3"`
	Column4    time.Time `json:"column_4"`
	MerchantID int32     `json:"merchant_id"`
}

type GetMonthlyTransactionMethodsByMerchantSuccessRow struct {
	Month             string  `json:"month"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetMonthlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method monthly
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 12-month analysis period
//
// Returns:
//
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	merchant_id: The merchant identifier
//	merchant_name: The merchant's name
//	payment_method: The payment method used
//	total_transactions: Count of successful transactions
//	total_amount: Total amount processed by this method
func (q *Queries) GetMonthlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantSuccessParams) ([]*GetMonthlyTransactionMethodsByMerchantSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyTransactionMethodsByMerchantSuccess,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.MerchantID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyTransactionMethodsByMerchantSuccessRow
	for rows.Next() {
		var i GetMonthlyTransactionMethodsByMerchantSuccessRow
		if err := rows.Scan(
			&i.Month,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyTransactionMethodsFailed = `-- name: GetMonthlyTransactionMethodsFailed :many
WITH
    date_ranges AS (
        SELECT
            $1::timestamp AS range1_start,
            $2::timestamp AS range1_end,
            $3::timestamp AS range2_start,
            $4::timestamp AS range2_end
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_months AS (
        SELECT generate_series(
            date_trunc('month', LEAST(
                (SELECT range1_start FROM date_ranges),
                (SELECT range2_start FROM date_ranges)
            )),
            date_trunc('month', GREATEST(
                (SELECT range1_end FROM date_ranges),
                (SELECT range2_end FROM date_ranges)
            )),
            interval '1 month'
        )::date AS activity_month
    ),
    all_combinations AS (
        SELECT 
            am.activity_month,
            pm.payment_method
        FROM all_months am
        CROSS JOIN payment_methods pm
    ),
    monthly_transactions AS (
        SELECT
            date_trunc('month', t.created_at)::date AS activity_month,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        JOIN date_ranges dr ON (
            t.created_at BETWEEN dr.range1_start AND dr.range1_end
            OR t.created_at BETWEEN dr.range2_start AND dr.range2_end
        )
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
        GROUP BY
            date_trunc('month', t.created_at),
            t.payment_method
    )
SELECT 
    TO_CHAR(ac.activity_month, 'Mon') AS month,
    ac.payment_method,
    COALESCE(mt.total_transactions, 0) AS total_transactions,
    COALESCE(mt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN monthly_transactions mt ON 
    ac.activity_month = mt.activity_month
    AND ac.payment_method = mt.payment_method
ORDER BY 
    ac.activity_month, 
    ac.payment_method
`

type GetMonthlyTransactionMethodsFailedParams struct {
	Column1 time.Time `json:"column_1"`
	Column2 time.Time `json:"column_2"`
	Column3 time.Time `json:"column_3"`
	Column4 time.Time `json:"column_4"`
}

type GetMonthlyTransactionMethodsFailedRow struct {
	Month             string  `json:"month"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetMonthlyTransactionMethodsFailed: Analyzes failed payment method usage by month
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 12-month analysis period
//
// Returns:
//
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	payment_method: The payment method used
//	total_transactions: Count of failed transactions
//	total_amount: Total amount that failed processing
func (q *Queries) GetMonthlyTransactionMethodsFailed(ctx context.Context, arg GetMonthlyTransactionMethodsFailedParams) ([]*GetMonthlyTransactionMethodsFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyTransactionMethodsFailed,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyTransactionMethodsFailedRow
	for rows.Next() {
		var i GetMonthlyTransactionMethodsFailedRow
		if err := rows.Scan(
			&i.Month,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyTransactionMethodsSuccess = `-- name: GetMonthlyTransactionMethodsSuccess :many
WITH
    date_ranges AS (
        SELECT
            $1::timestamp AS range1_start,
            $2::timestamp AS range1_end,
            $3::timestamp AS range2_start,
            $4::timestamp AS range2_end
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_months AS (
        SELECT generate_series(
            date_trunc('month', LEAST(
                (SELECT range1_start FROM date_ranges),
                (SELECT range2_start FROM date_ranges)
            )),
            date_trunc('month', GREATEST(
                (SELECT range1_end FROM date_ranges),
                (SELECT range2_end FROM date_ranges)
            )),
            interval '1 month'
        )::date AS activity_month
    ),
    all_combinations AS (
        SELECT 
            am.activity_month,
            pm.payment_method
        FROM all_months am
        CROSS JOIN payment_methods pm
    ),
    monthly_transactions AS (
        SELECT
            date_trunc('month', t.created_at)::date AS activity_month,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        JOIN date_ranges dr ON (
            t.created_at BETWEEN dr.range1_start AND dr.range1_end
            OR t.created_at BETWEEN dr.range2_start AND dr.range2_end
        )
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
        GROUP BY
            date_trunc('month', t.created_at),
            t.payment_method
    )
SELECT 
    TO_CHAR(ac.activity_month, 'Mon') AS month,
    ac.payment_method,
    COALESCE(mt.total_transactions, 0) AS total_transactions,
    COALESCE(mt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN monthly_transactions mt ON 
    ac.activity_month = mt.activity_month
    AND ac.payment_method = mt.payment_method
ORDER BY 
    ac.activity_month, 
    ac.payment_method
`

type GetMonthlyTransactionMethodsSuccessParams struct {
	Column1 time.Time `json:"column_1"`
	Column2 time.Time `json:"column_2"`
	Column3 time.Time `json:"column_3"`
	Column4 time.Time `json:"column_4"`
}

type GetMonthlyTransactionMethodsSuccessRow struct {
	Month             string  `json:"month"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetMonthlyTransactionMethodsSuccess: Analyzes successful payment method usage by month
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 12-month analysis period
//
// Returns:
//
//	month: 3-letter month abbreviation (e.g. 'Jan')
//	payment_method: The payment method used
//	total_transactions: Count of successful transactions
//	total_amount: Total amount processed by this method
func (q *Queries) GetMonthlyTransactionMethodsSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsSuccessParams) ([]*GetMonthlyTransactionMethodsSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getMonthlyTransactionMethodsSuccess,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMonthlyTransactionMethodsSuccessRow
	for rows.Next() {
		var i GetMonthlyTransactionMethodsSuccessRow
		if err := rows.Scan(
			&i.Month,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
FROM transactions
WHERE
    transaction_id = $1
    AND deleted_at IS NULL
`

// GetTransactionByID: Retrieves transaction by transaction ID
// Purpose: Fetch specific transaction details
// Parameters:
//
//	$1: transaction_id - The unique transaction ID
//
// Returns: Full transaction record if active
// Business Logic:
//   - Excludes deleted transactions
//   - Used for transaction details/receipts
//   - Primary lookup for transaction management
func (q *Queries) GetTransactionByID(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getTransactionByMerchant = `-- name: GetTransactionByMerchant :many
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at, COUNT(*) OVER () AS total_count
FROM transactions
WHERE
    deleted_at IS NULL
    AND (
        $1::TEXT IS NULL
        OR payment_method ILIKE '%' || $1 || '%'
        OR payment_status ILIKE '%' || $1 || '%'
    )
    AND (
        $2::INT IS NULL
        OR merchant_id = $2
    )
ORDER BY created_at DESC
LIMIT $3
OFFSET
    $4
`

type GetTransactionByMerchantParams struct {
	Column1 string `json:"column_1"`
	Column2 int32  `json:"column_2"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionByMerchantRow struct {
	TransactionID int32         `json:"transaction_id"`
	OrderID       int32         `json:"order_id"`
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
	TotalCount    int64         `json:"total_count"`
}

// GetTransactionByMerchant: Retrieves merchant-specific transactions with pagination
// Purpose: List transactions filtered by merchant ID
// Parameters:
//
//	$1: search_term - Optional text to filter transactions
//	$2: merchant_id - Optional merchant ID to filter by (NULL for all merchants)
//	$3: limit - Pagination limit
//	$4: offset - Pagination offset
//
// Returns:
//
//	Transaction records with total_count
//
// Business Logic:
//   - Combines merchant filtering with search functionality
//   - Maintains same sorting and pagination as other transaction queries
//   - Useful for merchant-specific transaction reporting
//   - NULL merchant_id parameter returns all merchants' transactions
func (q *Queries) GetTransactionByMerchant(ctx context.Context, arg GetTransactionByMerchantParams) ([]*GetTransactionByMerchantRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionByMerchant,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionByMerchantRow
	for rows.Next() {
		var i GetTransactionByMerchantRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.OrderID,
			&i.MerchantID,
			&i.PaymentMethod,
			&i.Amount,
			&i.ChangeAmount,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByOrderID = `-- name: GetTransactionByOrderID :one
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
FROM transactions
WHERE
    order_id = $1
    AND deleted_at IS NULL
`

// GetTransactionByOrderID: Retrieves transaction by order reference
// Purpose: Lookup transaction associated with specific order
// Parameters:
//
//	$1: order_id - The order ID to search by
//
// Returns: Transaction record if found and active
// Business Logic:
//   - Only returns non-deleted transactions
//   - Used for order payment verification
//   - Helps prevent duplicate payments
func (q *Queries) GetTransactionByOrderID(ctx context.Context, orderID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByOrderID, orderID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at, COUNT(*) OVER () AS total_count
FROM transactions
WHERE
    deleted_at IS NULL
    AND (
        $1::TEXT IS NULL
        OR payment_method ILIKE '%' || $1 || '%'
        OR payment_status ILIKE '%' || $1 || '%'
    )
ORDER BY created_at DESC
LIMIT $2
OFFSET
    $3
`

type GetTransactionsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsRow struct {
	TransactionID int32         `json:"transaction_id"`
	OrderID       int32         `json:"order_id"`
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
	TotalCount    int64         `json:"total_count"`
}

// GetTransactions: Retrieves paginated list of active transactions with search capability
// Purpose: List all active transactions for management UI
// Parameters:
//
//	$1: search_term - Optional text to filter transactions by payment method or status (NULL for no filter)
//	$2: limit - Maximum number of records to return (pagination limit)
//	$3: offset - Number of records to skip (pagination offset)
//
// Returns:
//
//	All transaction fields plus total_count of matching records
//
// Business Logic:
//   - Excludes soft-deleted transactions (deleted_at IS NULL)
//   - Supports partial text matching on payment_method and payment_status fields (case-insensitive)
//   - Returns newest transactions first (created_at DESC)
//   - Provides total_count for client-side pagination
//   - Uses window function COUNT(*) OVER() for efficient total count
func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]*GetTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.OrderID,
			&i.MerchantID,
			&i.PaymentMethod,
			&i.Amount,
			&i.ChangeAmount,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsActive = `-- name: GetTransactionsActive :many
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at, COUNT(*) OVER () AS total_count
FROM transactions
WHERE
    deleted_at IS NULL
    AND (
        $1::TEXT IS NULL
        OR payment_method ILIKE '%' || $1 || '%'
        OR payment_status ILIKE '%' || $1 || '%'
    )
ORDER BY created_at DESC
LIMIT $2
OFFSET
    $3
`

type GetTransactionsActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsActiveRow struct {
	TransactionID int32         `json:"transaction_id"`
	OrderID       int32         `json:"order_id"`
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
	TotalCount    int64         `json:"total_count"`
}

// GetTransactionsActive: Retrieves paginated list of active transactions (identical to GetTransactions)
// Purpose: Maintains consistent API pattern with other active/trashed endpoints
// Parameters:
//
//	$1: search_term - Optional filter text for payment method/status
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns:
//
//	Active transaction records with total_count
//
// Business Logic:
//   - Same functionality as GetTransactions
//   - Exists for consistency in API design patterns
//
// Note: Could be consolidated with GetTransactions if duplicate functionality is undesired
func (q *Queries) GetTransactionsActive(ctx context.Context, arg GetTransactionsActiveParams) ([]*GetTransactionsActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsActiveRow
	for rows.Next() {
		var i GetTransactionsActiveRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.OrderID,
			&i.MerchantID,
			&i.PaymentMethod,
			&i.Amount,
			&i.ChangeAmount,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsTrashed = `-- name: GetTransactionsTrashed :many
SELECT transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at, COUNT(*) OVER () AS total_count
FROM transactions
WHERE
    deleted_at IS NOT NULL
    AND (
        $1::TEXT IS NULL
        OR payment_method ILIKE '%' || $1 || '%'
        OR payment_status ILIKE '%' || $1 || '%'
    )
ORDER BY created_at DESC
LIMIT $2
OFFSET
    $3
`

type GetTransactionsTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsTrashedRow struct {
	TransactionID int32         `json:"transaction_id"`
	OrderID       int32         `json:"order_id"`
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
	TotalCount    int64         `json:"total_count"`
}

// GetTransactionsTrashed: Retrieves paginated list of soft-deleted transactions
// Purpose: View and manage deleted transactions for audit/recovery
// Parameters:
//
//	$1: search_term - Optional text to filter trashed transactions
//	$2: limit - Maximum records per page
//	$3: offset - Records to skip
//
// Returns:
//
//	Trashed transaction records with total_count
//
// Business Logic:
//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
//   - Maintains same search functionality as active transaction queries
//   - Preserves chronological sorting (newest first)
//   - Used in transaction recovery/audit interfaces
//   - Includes total_count for pagination in trash management UI
func (q *Queries) GetTransactionsTrashed(ctx context.Context, arg GetTransactionsTrashedParams) ([]*GetTransactionsTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsTrashedRow
	for rows.Next() {
		var i GetTransactionsTrashedRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.OrderID,
			&i.MerchantID,
			&i.PaymentMethod,
			&i.Amount,
			&i.ChangeAmount,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyAmountTransactionFailed = `-- name: GetYearlyAmountTransactionFailed :many
WITH
    yearly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            COUNT(*) AS total_failed,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND (
                EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer
                OR EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer - 1
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            total_failed::integer,
            total_amount::integer
        FROM yearly_data
        UNION ALL
        SELECT
            $1::text AS year,
            0::integer AS total_failed,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer
            )
        UNION ALL
        SELECT ($1::integer - 1)::text AS year,
            0::integer AS total_failed,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer - 1
            )
    )
SELECT year, total_failed, total_amount
FROM formatted_data
ORDER BY year DESC
`

type GetYearlyAmountTransactionFailedRow struct {
	Year        string `json:"year"`
	TotalFailed int32  `json:"total_failed"`
	TotalAmount int32  `json:"total_amount"`
}

// GetYearlyAmountTransactionFailed: Retrieves yearly failed transaction metrics
// Purpose: Generate annual reports of failed transactions
// Parameters:
//
//	$1: Reference year for comparison (current year as integer)
//
// Returns:
//
//	year: Year as text
//	total_failed: Count of failed transactions
//	total_amount: Sum of failed transaction amounts
//
// Business Logic:
//   - Compares current year with previous year automatically
//   - Only includes failed (payment_status = 'failed') transactions
//   - Excludes deleted transactions
//   - Includes gap-filling for years with no transactions
//   - Returns 0 values for years with no failed transactions
//   - Orders by most recent year first
func (q *Queries) GetYearlyAmountTransactionFailed(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyAmountTransactionFailed, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyAmountTransactionFailedRow
	for rows.Next() {
		var i GetYearlyAmountTransactionFailedRow
		if err := rows.Scan(&i.Year, &i.TotalFailed, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyAmountTransactionFailedByMerchant = `-- name: GetYearlyAmountTransactionFailedByMerchant :many

WITH
    yearly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            COUNT(*) AS total_failed,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND t.merchant_id = $2
            AND (
                EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer
                OR EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer - 1
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            total_failed::integer,
            total_amount::integer
        FROM yearly_data
        UNION ALL
        SELECT
            $1::text AS year,
            0::integer AS total_failed,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer
            )
        UNION ALL
        SELECT ($1::integer - 1)::text AS year,
            0::integer AS total_failed,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer - 1
            )
    )
SELECT year, total_failed, total_amount
FROM formatted_data
ORDER BY year DESC
`

type GetYearlyAmountTransactionFailedByMerchantParams struct {
	Column1    int32 `json:"column_1"`
	MerchantID int32 `json:"merchant_id"`
}

type GetYearlyAmountTransactionFailedByMerchantRow struct {
	Year        string `json:"year"`
	TotalFailed int32  `json:"total_failed"`
	TotalAmount int32  `json:"total_amount"`
}

// GetYearlyAmountTransactionFailedByMerchant: Retrieves yearly failed transaction metrics
// Purpose: Generate annual reports of failed transactions by merchant_id
// Parameters:
//
//	$1: Reference year for comparison (current year as integer)
//	$2: Merchant ID
//
// Returns:
//
//	year: Year as text
//	total_failed: Count of failed transactions
//	total_amount: Sum of failed transaction amounts
//
// Business Logic:
//   - Compares current year with previous year automatically
//   - Only includes failed (payment_status = 'failed') transactions
//   - Excludes deleted transactions
//   - Includes gap-filling for years with no transactions
//   - Returns 0 values for years with no failed transactions
//   - Orders by most recent year first
func (q *Queries) GetYearlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetYearlyAmountTransactionFailedByMerchantParams) ([]*GetYearlyAmountTransactionFailedByMerchantRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyAmountTransactionFailedByMerchant, arg.Column1, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyAmountTransactionFailedByMerchantRow
	for rows.Next() {
		var i GetYearlyAmountTransactionFailedByMerchantRow
		if err := rows.Scan(&i.Year, &i.TotalFailed, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyAmountTransactionSuccess = `-- name: GetYearlyAmountTransactionSuccess :many
WITH
    yearly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            COUNT(*) AS total_success,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND (
                EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer
                OR EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer - 1
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            total_success::integer,
            total_amount::integer
        FROM yearly_data
        UNION ALL
        SELECT
            $1::text AS year,
            0::integer AS total_success,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer
            )
        UNION ALL
        SELECT ($1::integer - 1)::text AS year,
            0::integer AS total_success,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer - 1
            )
    )
SELECT year, total_success, total_amount
FROM formatted_data
ORDER BY year DESC
`

type GetYearlyAmountTransactionSuccessRow struct {
	Year         string `json:"year"`
	TotalSuccess int32  `json:"total_success"`
	TotalAmount  int32  `json:"total_amount"`
}

// GetYearlyAmountTransactionSuccess: Retrieves yearly success transaction metrics
// Purpose: Generate annual reports of successful transactions
// Parameters:
//
//	$1: Reference year for comparison (current year as integer)
//
// Returns:
//
//	year: Year as text
//	total_success: Count of successful transactions
//	total_amount: Sum of successful transaction amounts
//
// Business Logic:
//   - Compares current year with previous year automatically
//   - Only includes successful (payment_status = 'success') transactions
//   - Excludes deleted transactions
//   - Includes gap-filling for years with no transactions
//   - Returns 0 values for years with no successful transactions
//   - Orders by most recent year first
func (q *Queries) GetYearlyAmountTransactionSuccess(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyAmountTransactionSuccess, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyAmountTransactionSuccessRow
	for rows.Next() {
		var i GetYearlyAmountTransactionSuccessRow
		if err := rows.Scan(&i.Year, &i.TotalSuccess, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyAmountTransactionSuccessByMerchant = `-- name: GetYearlyAmountTransactionSuccessByMerchant :many
WITH
    yearly_data AS (
        SELECT
            EXTRACT(
                YEAR
                FROM t.created_at
            )::integer AS year,
            COUNT(*) AS total_success,
            COALESCE(SUM(t.amount), 0)::integer AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND t.merchant_id = $2
            AND (
                EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer
                OR EXTRACT(
                    YEAR
                    FROM t.created_at
                ) = $1::integer - 1
            )
        GROUP BY
            EXTRACT(
                YEAR
                FROM t.created_at
            )
    ),
    formatted_data AS (
        SELECT
            year::text,
            total_success::integer,
            total_amount::integer
        FROM yearly_data
        UNION ALL
        SELECT
            $1::text AS year,
            0::integer AS total_success,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer
            )
        UNION ALL
        SELECT ($1::integer - 1)::text AS year,
            0::integer AS total_success,
            0::integer AS total_amount
        WHERE
            NOT EXISTS (
                SELECT 1
                FROM yearly_data
                WHERE
                    year = $1::integer - 1
            )
    )
SELECT year, total_success, total_amount
FROM formatted_data
ORDER BY year DESC
`

type GetYearlyAmountTransactionSuccessByMerchantParams struct {
	Column1    int32 `json:"column_1"`
	MerchantID int32 `json:"merchant_id"`
}

type GetYearlyAmountTransactionSuccessByMerchantRow struct {
	Year         string `json:"year"`
	TotalSuccess int32  `json:"total_success"`
	TotalAmount  int32  `json:"total_amount"`
}

// GetYearlyAmountTransactionSuccessByMerchant: Retrieves yearly success transaction metrics
// Purpose: Generate annual reports of successful transactions by merchant_id
// Parameters:
//
//	$1: Reference year for comparison (current year as integer)
//	$2: Merchant ID
//
// Returns:
//
//	year: Year as text
//	total_success: Count of successful transactions
//	total_amount: Sum of successful transaction amounts
//
// Business Logic:
//   - Compares current year with previous year automatically
//   - Only includes successful (payment_status = 'success') transactions
//   - Excludes deleted transactions
//   - Includes gap-filling for years with no transactions
//   - Returns 0 values for years with no successful transactions
//   - Orders by most recent year first
func (q *Queries) GetYearlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetYearlyAmountTransactionSuccessByMerchantParams) ([]*GetYearlyAmountTransactionSuccessByMerchantRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyAmountTransactionSuccessByMerchant, arg.Column1, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyAmountTransactionSuccessByMerchantRow
	for rows.Next() {
		var i GetYearlyAmountTransactionSuccessByMerchantRow
		if err := rows.Scan(&i.Year, &i.TotalSuccess, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyTransactionMethodsByMerchantFailed = `-- name: GetYearlyTransactionMethodsByMerchantFailed :many
WITH
    year_series AS (
        SELECT generate_series(
            EXTRACT(YEAR FROM $1::timestamp)::integer - 1,
            EXTRACT(YEAR FROM $1::timestamp)::integer,
            1
        ) AS year
    ),
    yearly_transactions AS (
        SELECT
            EXTRACT(YEAR FROM t.created_at)::integer AS year,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            SUM(t.amount)::NUMERIC AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND t.merchant_id = $2
            AND EXTRACT(YEAR FROM t.created_at) BETWEEN (EXTRACT(YEAR FROM $1::timestamp) - 1) AND EXTRACT(YEAR FROM $1::timestamp)
        GROUP BY
            year,
            t.payment_method
    ),
    payment_methods AS (
        SELECT DISTINCT payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    )
SELECT
    ys.year::text AS year,
    pm.payment_method,
    COALESCE(yt.total_transactions, 0) AS total_transactions,
    COALESCE(yt.total_amount, 0) AS total_amount
FROM year_series ys
CROSS JOIN payment_methods pm
LEFT JOIN yearly_transactions yt
    ON ys.year = yt.year
    AND pm.payment_method = yt.payment_method
ORDER BY ys.year, pm.payment_method
`

type GetYearlyTransactionMethodsByMerchantFailedParams struct {
	Column1    time.Time `json:"column_1"`
	MerchantID int32     `json:"merchant_id"`
}

type GetYearlyTransactionMethodsByMerchantFailedRow struct {
	Year              string  `json:"year"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetYearlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method yearly
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 5-year analysis window
//
// Returns:
//
//	year: 4-digit year as text
//	merchant_id: The merchant identifier
//	merchant_name: The merchant's name
//	payment_method: The payment method used
//	total_transactions: Count of failed transactions
//	total_amount: Total amount that failed processing
func (q *Queries) GetYearlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantFailedParams) ([]*GetYearlyTransactionMethodsByMerchantFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyTransactionMethodsByMerchantFailed, arg.Column1, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyTransactionMethodsByMerchantFailedRow
	for rows.Next() {
		var i GetYearlyTransactionMethodsByMerchantFailedRow
		if err := rows.Scan(
			&i.Year,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyTransactionMethodsByMerchantSuccess = `-- name: GetYearlyTransactionMethodsByMerchantSuccess :many
WITH
    year_series AS (
        SELECT generate_series(
            EXTRACT(YEAR FROM $1::timestamp)::integer - 2,
            EXTRACT(YEAR FROM $1::timestamp)::integer,
            1
        ) AS year
    ),
    yearly_transactions AS (
        SELECT
            EXTRACT(YEAR FROM t.created_at)::integer AS year,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            SUM(t.amount)::NUMERIC AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND t.merchant_id = $2
            AND EXTRACT(YEAR FROM t.created_at) BETWEEN (EXTRACT(YEAR FROM $1::timestamp) - 1) AND EXTRACT(YEAR FROM $1::timestamp)
        GROUP BY
            year,
            t.payment_method
    ),
    payment_methods AS (
        SELECT DISTINCT payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    )
SELECT
    ys.year::text AS year,
    pm.payment_method,
    COALESCE(yt.total_transactions, 0) AS total_transactions,
    COALESCE(yt.total_amount, 0) AS total_amount
FROM year_series ys
CROSS JOIN payment_methods pm
LEFT JOIN yearly_transactions yt
    ON ys.year = yt.year
    AND pm.payment_method = yt.payment_method
ORDER BY ys.year, pm.payment_method
`

type GetYearlyTransactionMethodsByMerchantSuccessParams struct {
	Column1    time.Time `json:"column_1"`
	MerchantID int32     `json:"merchant_id"`
}

type GetYearlyTransactionMethodsByMerchantSuccessRow struct {
	Year              string  `json:"year"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetYearlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method yearly
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 5-year analysis window
//
// Returns:
//
//	year: 4-digit year as text
//	merchant_id: The merchant identifier
//	merchant_name: The merchant's name
//	payment_method: The payment method used
//	total_transactions: Count of successful transactions
//	total_amount: Total amount processed by this method
func (q *Queries) GetYearlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantSuccessParams) ([]*GetYearlyTransactionMethodsByMerchantSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyTransactionMethodsByMerchantSuccess, arg.Column1, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyTransactionMethodsByMerchantSuccessRow
	for rows.Next() {
		var i GetYearlyTransactionMethodsByMerchantSuccessRow
		if err := rows.Scan(
			&i.Year,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyTransactionMethodsFailed = `-- name: GetYearlyTransactionMethodsFailed :many
WITH
    year_range AS (
        SELECT 
            EXTRACT(YEAR FROM $1::timestamp)::int - 1 AS start_year,
            EXTRACT(YEAR FROM $1::timestamp)::int AS end_year
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_years AS (
        SELECT generate_series(
            (SELECT start_year FROM year_range),
            (SELECT end_year FROM year_range)
        )::int AS year
    ),
    all_combinations AS (
        SELECT 
            ay.year::text AS year,  
            pm.payment_method
        FROM all_years ay
        CROSS JOIN payment_methods pm
    ),
    yearly_transactions AS (
        SELECT
            EXTRACT(YEAR FROM t.created_at)::text AS year,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'failed'
            AND EXTRACT(YEAR FROM t.created_at) BETWEEN (SELECT start_year FROM year_range) AND (SELECT end_year FROM year_range)
        GROUP BY
            EXTRACT(YEAR FROM t.created_at),
            t.payment_method
    )
SELECT 
    ac.year, 
    ac.payment_method,
    COALESCE(yt.total_transactions, 0) AS total_transactions,
    COALESCE(yt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN yearly_transactions yt ON 
    ac.year = yt.year
    AND ac.payment_method = yt.payment_method
ORDER BY 
    ac.year,  
    ac.payment_method
`

type GetYearlyTransactionMethodsFailedRow struct {
	Year              string  `json:"year"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetYearlyTransactionMethodsFailed: Analyzes failed payment method usage by year
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 5-year analysis window
//
// Returns:
//
//	year: 4-digit year as text
//	payment_method: The payment method used
//	total_transactions: Count of failed transactions
//	total_amount: Total amount that failed processing
func (q *Queries) GetYearlyTransactionMethodsFailed(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsFailedRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyTransactionMethodsFailed, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyTransactionMethodsFailedRow
	for rows.Next() {
		var i GetYearlyTransactionMethodsFailedRow
		if err := rows.Scan(
			&i.Year,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearlyTransactionMethodsSuccess = `-- name: GetYearlyTransactionMethodsSuccess :many
WITH
    year_range AS (
        SELECT 
            EXTRACT(YEAR FROM $1::timestamp)::int - 1 AS start_year,
            EXTRACT(YEAR FROM $1::timestamp)::int AS end_year
    ),
    payment_methods AS (
        SELECT DISTINCT
            payment_method
        FROM transactions
        WHERE deleted_at IS NULL
    ),
    all_years AS (
        SELECT generate_series(
            (SELECT start_year FROM year_range),
            (SELECT end_year FROM year_range)
        )::int AS year
    ),
    all_combinations AS (
        SELECT 
            ay.year::text AS year,  
            pm.payment_method
        FROM all_years ay
        CROSS JOIN payment_methods pm
    ),
    yearly_transactions AS (
        SELECT
            EXTRACT(YEAR FROM t.created_at)::text AS year,
            t.payment_method,
            COUNT(t.transaction_id) AS total_transactions,
            COALESCE(SUM(t.amount), 0)::NUMERIC AS total_amount
        FROM transactions t
        WHERE
            t.deleted_at IS NULL
            AND t.payment_status = 'success'
            AND EXTRACT(YEAR FROM t.created_at) BETWEEN (SELECT start_year FROM year_range) AND (SELECT end_year FROM year_range)
        GROUP BY
            EXTRACT(YEAR FROM t.created_at),
            t.payment_method
    )
SELECT 
    ac.year,  
    ac.payment_method,
    COALESCE(yt.total_transactions, 0) AS total_transactions,
    COALESCE(yt.total_amount, 0) AS total_amount
FROM all_combinations ac
LEFT JOIN yearly_transactions yt ON 
    ac.year = yt.year
    AND ac.payment_method = yt.payment_method
ORDER BY 
    ac.year,
    ac.payment_method
`

type GetYearlyTransactionMethodsSuccessRow struct {
	Year              string  `json:"year"`
	PaymentMethod     string  `json:"payment_method"`
	TotalTransactions int64   `json:"total_transactions"`
	TotalAmount       float64 `json:"total_amount"`
}

// GetYearlyTransactionMethodsSuccess: Analyzes successful payment method usage by year
// Parameters:
//
//	$1: Reference date (timestamp) - determines the 5-year analysis window
//
// Returns:
//
//	year: 4-digit year as text
//	payment_method: The payment method used
//	total_transactions: Count of successful transactions
//	total_amount: Total amount processed by this method
func (q *Queries) GetYearlyTransactionMethodsSuccess(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsSuccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearlyTransactionMethodsSuccess, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetYearlyTransactionMethodsSuccessRow
	for rows.Next() {
		var i GetYearlyTransactionMethodsSuccessRow
		if err := rows.Scan(
			&i.Year,
			&i.PaymentMethod,
			&i.TotalTransactions,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAllTransactions = `-- name: RestoreAllTransactions :exec
UPDATE transactions
SET
    deleted_at = NULL
WHERE
    deleted_at IS NOT NULL
`

// RestoreAllTransactions: Mass restoration of cancelled transactions
// Purpose: Recover all trashed transactions at once
// Business Logic:
//   - Reactivates all soft-deleted transactions
//   - No parameters needed (bulk operation)
//   - Typically used during system recovery
func (q *Queries) RestoreAllTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllTransactions)
	return err
}

const restoreTransaction = `-- name: RestoreTransaction :one
UPDATE transactions
SET
    deleted_at = NULL
WHERE
    transaction_id = $1
    AND deleted_at IS NOT NULL
RETURNING
    transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
`

// RestoreTransaction: Recovers a soft-deleted transaction
// Purpose: Reactivate a cancelled transaction
// Parameters:
//
//	$1: transaction_id - ID of transaction to restore
//
// Returns: The restored transaction record
// Business Logic:
//   - Nullifies deleted_at field
//   - Only works on previously cancelled transactions
//   - Maintains all original transaction data
func (q *Queries) RestoreTransaction(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, restoreTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashTransaction = `-- name: TrashTransaction :one
UPDATE transactions
SET
    deleted_at = current_timestamp
WHERE
    transaction_id = $1
    AND deleted_at IS NULL
RETURNING
    transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
`

// TrashTransaction: Soft-deletes a transaction
// Purpose: Void/cancel a transaction without permanent deletion
// Parameters:
//
//	$1: transaction_id - ID of transaction to cancel
//
// Returns: The soft-deleted transaction record
// Business Logic:
//   - Sets deleted_at to current timestamp
//   - Preserves transaction for reporting
//   - Only processes active transactions
//   - Can be restored if needed
func (q *Queries) TrashTransaction(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, trashTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    merchant_id = $2,
    payment_method = $3,
    amount = $4,
    change_amount = $5,
    payment_status = $6,
    order_id = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE
    transaction_id = $1
    AND deleted_at IS NULL
RETURNING
    transaction_id, order_id, merchant_id, payment_method, amount, change_amount, payment_status, created_at, updated_at, deleted_at
`

type UpdateTransactionParams struct {
	TransactionID int32         `json:"transaction_id"`
	MerchantID    int32         `json:"merchant_id"`
	PaymentMethod string        `json:"payment_method"`
	Amount        int32         `json:"amount"`
	ChangeAmount  sql.NullInt32 `json:"change_amount"`
	PaymentStatus string        `json:"payment_status"`
	OrderID       int32         `json:"order_id"`
}

// UpdateTransaction: Modifies transaction details
// Purpose: Update transaction information
// Parameters:
//
//	$1: transaction_id - ID of transaction to update
//	$2: merchant_id - Updated merchant reference
//	$3: payment_method - Updated payment method
//	$4: amount - Updated transaction amount
//	$5: change_amount - Updated change amount
//	$6: payment_status - Updated payment status
//	$7: order_id - Updated order reference
//
// Returns: Updated transaction record
// Business Logic:
//   - Auto-updates updated_at timestamp
//   - Only modifies active transactions
//   - Validates all payment fields
//   - Used for payment corrections/updates
func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.TransactionID,
		arg.MerchantID,
		arg.PaymentMethod,
		arg.Amount,
		arg.ChangeAmount,
		arg.PaymentStatus,
		arg.OrderID,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.OrderID,
		&i.MerchantID,
		&i.PaymentMethod,
		&i.Amount,
		&i.ChangeAmount,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
