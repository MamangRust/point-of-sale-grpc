// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"time"
)

type Querier interface {
	// AssignRoleToUser: Assigns a role to a user (creates a user-role relation)
	// Purpose: Role management for user access control
	// Parameters:
	//   $1: User ID
	//   $2: Role ID
	// Returns:
	//   user_role_id, user_id, role_id, timestamps (incl. deleted_at for future status check)
	// Business Logic:
	//   - Adds a new entry in the user_roles mapping table
	//   - Timestamps created_at and updated_at auto-set to current
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) (*UserRole, error)
	// CalculateTotalPrice: Calculates total price of active order items for a specific order
	// Purpose: Provides the aggregated monetary value of an order
	// Parameters:
	//   $1: order_id - identifier of the order
	// Returns:
	//   total_price: Sum of (quantity * price) for all active items in the order
	// Business Logic:
	//   - Ignores soft-deleted items
	//   - Ensures result is zero if no items exist
	CalculateTotalPrice(ctx context.Context, orderID int32) (int32, error)
	// CreateCashier: Creates a new cashier record
	// Purpose: Add new cashier to the system
	// Parameters:
	//   $1: merchant_id - Associated merchant ID
	//   $2: user_id - User account ID for the cashier
	//   $3: name - Full name of the cashier
	// Returns: Complete created cashier record
	// Business Logic:
	//   - Sets created_at timestamp automatically
	//   - Requires all mandatory fields
	CreateCashier(ctx context.Context, arg CreateCashierParams) (*Cashier, error)
	// CreateCategory: Inserts a new category into the system
	// Purpose: Adds a new product category for classification and reporting
	// Parameters:
	//   $1: Category name
	//   $2: Category description
	//   $3: Slug for category (URL-friendly identifier)
	// Returns:
	//   Full category record including generated ID
	// Business Logic:
	//   - Assumes unique slug for identification in URLs
	//   - Automatically populates timestamps via default DB behavior (if configured)
	CreateCategory(ctx context.Context, arg CreateCategoryParams) (*Category, error)
	// CreateMerchant: Creates a new merchant account
	// Purpose: Register a new merchant in the system
	// Parameters:
	//   $1: user_id - Associated user account ID
	//   $2: name - Business name
	//   $3: description - Business description
	//   $4: address - Physical address
	//   $5: contact_email - Business email
	//   $6: contact_phone - Business phone
	//   $7: status - Account status (active/inactive)
	// Returns: The created merchant record
	// Business Logic:
	//   - Sets created_at timestamp automatically
	//   - Requires all mandatory merchant fields
	//   - Status defaults to 'active' unless specified otherwise
	CreateMerchant(ctx context.Context, arg CreateMerchantParams) (*Merchant, error)
	// CreateOrder: Creates a new order record
	// Purpose: Register a new transaction in the system
	// Parameters:
	//   $1: merchant_id - UUID of the merchant associated with the order
	//   $2: cashier_id - ID of the cashier processing the order
	//   $3: total_price - Numeric total amount of the order
	// Returns: The complete created order record
	// Business Logic:
	//   - Automatically sets created_at timestamp
	//   - Requires merchant_id, cashier_id and total_price
	//   - Typically followed by order item creation
	CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error)
	// CreateOrderItem: Inserts a new order item record
	// Purpose: Adds a product to a specific order
	// Parameters:
	//   $1: order_id
	//   $2: product_id
	//   $3: quantity
	//   $4: price
	// Returns:
	//   The newly created order item
	// Business Logic:
	//   - Assumes quantity and price are validated in application layer
	CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (*OrderItem, error)
	// CreateProduct: Creates a new product record
	// Purpose: Add a new product to inventory
	// Parameters:
	//   $1: merchant_id - Merchant who owns the product
	//   $2: category_id - Product category
	//   $3: name - Product name
	//   $4: description - Detailed description
	//   $5: price - Selling price
	//   $6: count_in_stock - Inventory quantity
	//   $7: brand - Manufacturer brand
	//   $8: weight - Product weight
	//   $9: slug_product - URL-friendly identifier
	//   $10: image_product - Image URL/path
	//   $11: barcode - Product barcode
	// Returns: Complete created product record
	// Business Logic:
	//   - Sets created_at automatically
	//   - Validates required fields
	//   - Initializes inventory tracking
	CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error)
	// CreateRefreshToken: Creates a new refresh token
	// Purpose: Generate a refresh token for user authentication
	// Parameters:
	//   $1: user_id - ID of the user this token belongs to
	//   $2: token - The actual refresh token string
	//   $3: expiration - Expiration timestamp of the token
	// Returns: The created refresh token record (excluding sensitive fields if any)
	// Business Logic:
	//   - Sets both created_at and updated_at to current timestamp
	//   - Used in JWT refresh token rotation
	//   - Typically created during login/auth flows
	CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (*RefreshToken, error)
	// CreateRole: Inserts a new role into the system
	// Purpose: Add new role definitions (e.g., Admin, Cashier, etc.)
	// Parameters:
	//   $1: Role name
	// Returns:
	//   Newly created role's full data (including timestamps)
	CreateRole(ctx context.Context, roleName string) (*Role, error)
	// CreateTransaction: Creates a new transaction record
	// Purpose: Record a new payment transaction
	// Parameters:
	//   $1: merchant_id - Merchant reference
	//   $2: payment_method - Payment method used
	//   $3: amount - Transaction amount
	//   $4: change_amount - Change amount (if applicable)
	//   $5: payment_status - Payment status ('success', 'failed', 'pending')
	//   $6: order_id - Associated order reference
	// Returns: Newly created transaction record
	// Business Logic:
	//   - Sets created_at and updated_at timestamps
	//   - Initializes deleted_at as NULL
	//   - Validates all payment fields
	//   - Used for recording new payments
	CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error)
	// CreateUser: Creates a new user account
	// Purpose: Register a new user in the system
	// Parameters:
	//   $1: firstname - User's first name
	//   $2: lastname - User's last name
	//   $3: email - User's email address (must be unique)
	//   $4: password - Hashed password string
	// Returns: The complete created user record
	// Business Logic:
	//   - Sets created_at and updated_at timestamps automatically
	//   - Requires all mandatory user fields
	//   - Email must be unique across the system
	//   - Password should be pre-hashed before insertion
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	// DeleteAllPermanentCashiers: Purges all trashed cashiers
	// Purpose: Clean up all soft-deleted records
	// Business Logic:
	//   - Irreversible bulk deletion
	//   - Only affects already soft-deleted records
	//   - Typically used during database maintenance
	DeleteAllPermanentCashiers(ctx context.Context) error
	// DeleteAllPermanentCategories: Permanently deletes all trashed categories
	// Purpose: Bulk purge of all soft-deleted category records
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Only affects records marked as deleted
	DeleteAllPermanentCategories(ctx context.Context) error
	// DeleteAllPermanentMerchants: Purges all trashed merchants
	// Purpose: Clean up all soft-deleted merchant records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already soft-deleted records
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentMerchants(ctx context.Context) error
	// DeleteAllPermanentOrders: Purges all cancelled orders
	// Purpose: Clean up all soft-deleted order records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already cancelled orders
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentOrders(ctx context.Context) error
	// DeleteAllPermanentOrdersItem: Permanently deletes all trashed order items
	// Purpose: Performs hard delete of all soft-deleted items
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Used for data cleanup or archival enforcement
	DeleteAllPermanentOrdersItem(ctx context.Context) error
	// DeleteAllPermanentProducts: Purges all trashed products
	// Purpose: Clean up deleted products
	// Business Logic:
	//   - Bulk permanent deletion
	//   - Database maintenance operation
	DeleteAllPermanentProducts(ctx context.Context) error
	// DeleteAllPermanentRoles: Permanently deletes all soft-deleted roles
	// Purpose: Bulk cleanup of trashed roles
	// Parameters: None
	DeleteAllPermanentRoles(ctx context.Context) error
	// DeleteAllPermanentTransactions: Purges all cancelled transactions
	// Purpose: Clean up all soft-deleted transaction records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already cancelled transactions
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentTransactions(ctx context.Context) error
	// DeleteAllPermanentUsers: Purges all trashed users
	// Purpose: Clean up all soft-deleted user records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already soft-deleted users
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentUsers(ctx context.Context) error
	// DeleteCashierPermanently: Hard-deletes a cashier
	// Purpose: Completely remove cashier from database
	// Parameters:
	//   $1: cashier_id - ID of cashier to delete
	// Business Logic:
	//   - Permanent deletion of already soft-deleted records
	//   - No return value (exec-only)
	//   - Use with caution - irreversible operation
	DeleteCashierPermanently(ctx context.Context, cashierID int32) error
	// DeleteCategoryPermanently: Removes a soft-deleted category permanently
	// Purpose: Final cleanup of trashed categories
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   Nothing (command only)
	// Business Logic:
	//   - Ensures category is deleted only if it has been soft-deleted
	DeleteCategoryPermanently(ctx context.Context, categoryID int32) error
	// DeleteMerchantPermanently: Hard-deletes a merchant
	// Purpose: Completely remove merchant from database
	// Parameters:
	//   $1: merchant_id - ID of merchant to delete
	// Business Logic:
	//   - Permanent deletion of already soft-deleted records
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger cleanup of related records
	DeleteMerchantPermanently(ctx context.Context, merchantID int32) error
	// DeleteOrderItemPermanently: Permanently deletes a trashed order item
	// Purpose: Removes the record entirely from the database
	// Parameters:
	//   $1: order_item_id
	// Returns: None
	// Business Logic:
	//   - Only deletes if already soft-deleted
	//   - Irreversible action
	DeleteOrderItemPermanently(ctx context.Context, orderItemID int32) error
	// DeleteOrderPermanently: Hard-deletes an order
	// Purpose: Completely remove order from database
	// Parameters:
	//   $1: order_id - UUID of order to delete
	// Business Logic:
	//   - Permanent deletion of already cancelled orders
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger deletion of related order_items
	DeleteOrderPermanently(ctx context.Context, orderID int32) error
	// DeletePermanentRole: Permanently deletes a trashed role
	// Purpose: Remove role from DB after soft delete
	// Parameters:
	//   $1: Role ID
	DeletePermanentRole(ctx context.Context, roleID int32) error
	// DeleteProductPermanently: Hard-deletes a product
	// Purpose: Completely remove product record
	// Parameters:
	//   $1: product_id - Product to delete
	// Business Logic:
	//   - Permanent deletion
	//   - Only affects already trashed products
	//   - Irreversible operation
	DeleteProductPermanently(ctx context.Context, productID int32) error
	// DeleteRefreshToken: Permanently deletes a refresh token
	// Purpose: Invalidate a specific refresh token
	// Parameters:
	//   $1: token - The token string to delete
	// Business Logic:
	//   - Hard deletes the token record
	//   - Used during logout/token invalidation
	//   - Prevents token reuse after deletion
	DeleteRefreshToken(ctx context.Context, token string) error
	// DeleteRefreshTokenByUserId: Permanently deletes all tokens for a user
	// Purpose: Invalidate all refresh tokens for a user
	// Parameters:
	//   $1: user_id - ID of the user whose tokens to delete
	// Business Logic:
	//   - Hard deletes all tokens for the user
	//   - Used during password reset or account lock
	//   - Ensures complete session invalidation
	DeleteRefreshTokenByUserId(ctx context.Context, userID int32) error
	// DeleteTransactionPermanently: Hard-deletes a transaction
	// Purpose: Completely remove transaction from database
	// Parameters:
	//   $1: transaction_id - ID of transaction to delete
	// Business Logic:
	//   - Permanent deletion of already cancelled transactions
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should be restricted to admin users
	DeleteTransactionPermanently(ctx context.Context, transactionID int32) error
	// DeleteUserPermanently: Hard-deletes a user account
	// Purpose: Completely remove user from database
	// Parameters:
	//   $1: user_id - ID of user to delete
	// Business Logic:
	//   - Permanent deletion of already soft-deleted users
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger cleanup of related records
	DeleteUserPermanently(ctx context.Context, userID int32) error
	// FindRefreshTokenByToken: Retrieves active refresh token by token string
	// Purpose: Validate and lookup refresh token
	// Parameters:
	//   $1: token - The refresh token string to find
	// Returns: The refresh token record if found and active
	// Business Logic:
	//   - Only returns non-deleted tokens
	//   - Used during token refresh operations
	//   - Helps prevent token reuse
	FindRefreshTokenByToken(ctx context.Context, token string) (*RefreshToken, error)
	// FindRefreshTokenByUserId: Retrieves latest active refresh token for user
	// Purpose: Get current valid refresh token for a user
	// Parameters:
	//   $1: user_id - ID of the user to find token for
	// Returns: The most recent refresh token for the user
	// Business Logic:
	//   - Returns only active (non-deleted) tokens
	//   - Orders by creation date (newest first)
	//   - Used for token management and validation
	//   - Limits to 1 result to get latest token
	FindRefreshTokenByUserId(ctx context.Context, userID int32) (*RefreshToken, error)
	// GetActiveRoles: Retrieves only active (non-deleted) roles with optional search and pagination
	// Purpose: Display roles that are currently usable in the system
	// Parameters:
	//   $1: Search query (nullable)
	//   $2: Limit
	//   $3: Offset
	// Returns:
	//   role_id, role_name, timestamps, and total_count
	GetActiveRoles(ctx context.Context, arg GetActiveRolesParams) ([]*GetActiveRolesRow, error)
	// GetCashierByID: Retrieves active cashier by ID
	// Purpose: Fetch cashier details for display/editing
	// Parameters:
	//   $1: cashier_id - ID of the cashier to retrieve
	// Returns: Full cashier record if found and active
	// Business Logic:
	//   - Excludes soft-deleted records
	//   - Returns single record or nothing
	GetCashierById(ctx context.Context, cashierID int32) (*Cashier, error)
	// GetCashiers: Retrieves paginated list of active cashiers with search capability
	// Purpose: List all active cashiers for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter cashiers by name or username (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All cashier fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted cashiers (deleted_at IS NULL)
	//   - Supports partial text matching on name and username fields (case-insensitive)
	//   - Returns newest cashiers first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCashiers(ctx context.Context, arg GetCashiersParams) ([]*GetCashiersRow, error)
	// GetCashiersActive: Retrieves paginated list of active cashiers with search capability
	// Purpose: List all active cashiers for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter cashiers by name or username (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All cashier fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted cashiers (deleted_at IS NULL)
	//   - Supports partial text matching on name and username fields (case-insensitive)
	//   - Returns newest cashiers first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCashiersActive(ctx context.Context, arg GetCashiersActiveParams) ([]*GetCashiersActiveRow, error)
	// GetCashiersByMerchant: Retrieves active cashiers filtered by merchant_id
	// Parameters:
	//   $1: Merchant ID (required)
	//   $2: Search term for cashier name (optional)
	//   $3: Limit
	//   $4: Offset
	// Returns:
	//   Cashier records belonging to specified merchant with total_count
	GetCashiersByMerchant(ctx context.Context, arg GetCashiersByMerchantParams) ([]*GetCashiersByMerchantRow, error)
	// GetCashiersTrashed: Retrieves paginated list of soft-deleted cashiers with search capability
	// Purpose: List all trashed (soft-deleted) cashiers for recovery or audit purposes
	// Parameters:
	//   $1: search_term - Optional text to filter cashiers by name or username (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All cashier fields plus total_count of matching records
	// Business Logic:
	//   - Includes only soft-deleted cashiers (deleted_at IS NOT NULL)
	//   - Supports partial text matching on name and username fields (case-insensitive)
	//   - Returns newest deleted cashiers first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCashiersTrashed(ctx context.Context, arg GetCashiersTrashedParams) ([]*GetCashiersTrashedRow, error)
	// GetCategories: Retrieves paginated list of active categories with search capability
	// Purpose: List all active product categories for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter categories by name or slug (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All category fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted categories (deleted_at IS NULL)
	//   - Supports partial text matching on name and slug_category fields (case-insensitive)
	//   - Returns newest categories first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCategories(ctx context.Context, arg GetCategoriesParams) ([]*GetCategoriesRow, error)
	// GetCategoriesActive: Retrieves paginated list of active categories with search capability
	// Purpose: List all active product categories for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter categories by name or slug (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All category fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted categories (deleted_at IS NULL)
	//   - Supports partial text matching on name and slug_category fields (case-insensitive)
	//   - Returns newest categories first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCategoriesActive(ctx context.Context, arg GetCategoriesActiveParams) ([]*GetCategoriesActiveRow, error)
	// GetCategoriesTrashed: Retrieves paginated list of soft-deleted categories
	// Purpose: View/manage deleted categories for potential restoration
	// Parameters:
	//   $1: search_term - Optional filter text (NULL for all trashed categories)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Trashed category records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Same search functionality as active categories
	//   - Maintains consistent sorting with active records
	//   - Used in trash management/recovery interfaces
	GetCategoriesTrashed(ctx context.Context, arg GetCategoriesTrashedParams) ([]*GetCategoriesTrashedRow, error)
	// GetCategoryByID: Fetches a single category by its ID
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category ID to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetCategoryByID(ctx context.Context, categoryID int32) (*Category, error)
	// GetCategoryByName: Fetches a single category by its name
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category name to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetCategoryByName(ctx context.Context, name string) (*Category, error)
	// GetCategoryByNameAndId: Fetches a single category by its name and id
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category name or id to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetCategoryByNameAndId(ctx context.Context, arg GetCategoryByNameAndIdParams) (*Category, error)
	// GetMerchantByID: Retrieves active merchant by ID
	// Purpose: Fetch merchant details for display/editing
	// Parameters:
	//   $1: merchant_id - ID of merchant to retrieve
	// Returns: Full merchant record if found and active
	// Business Logic:
	//   - Excludes soft-deleted records
	//   - Returns single record or nothing
	//   - Used for merchant profile viewing and editing
	GetMerchantByID(ctx context.Context, merchantID int32) (*Merchant, error)
	// GetMerchants: Retrieves paginated list of active merchants with search capability
	// Purpose: List all active merchants for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter merchants by name or email (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All merchant fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted merchants (deleted_at IS NULL)
	//   - Supports partial text matching on name and contact_email fields (case-insensitive ILIKE)
	//   - Returns newest merchants first (created_at DESC)
	//   - Provides total_count for client-side pagination calculations
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetMerchants(ctx context.Context, arg GetMerchantsParams) ([]*GetMerchantsRow, error)
	// GetMerchantsActive: Retrieves paginated list of active merchants (identical to GetMerchants)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for name/email
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active merchant records with total_count
	// Business Logic:
	//   - Same functionality as GetMerchants
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetMerchants if duplicate functionality is undesired
	GetMerchantsActive(ctx context.Context, arg GetMerchantsActiveParams) ([]*GetMerchantsActiveRow, error)
	// GetMerchantsTrashed: Retrieves paginated list of soft-deleted merchants
	// Purpose: View and manage deleted merchants for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed merchants
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed merchant records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active merchant queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in merchant recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetMerchantsTrashed(ctx context.Context, arg GetMerchantsTrashedParams) ([]*GetMerchantsTrashedRow, error)
	// GetMonthlyAmountTransactionFailed: Retrieves monthly failed transaction metrics
	// Purpose: Generate monthly reports of failed transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no failed transactions
	//   - Returns 0 values for months with no failed transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionFailed(ctx context.Context, arg GetMonthlyAmountTransactionFailedParams) ([]*GetMonthlyAmountTransactionFailedRow, error)
	// GetMonthlyAmountTransactionFailedByMerchant: Retrieves monthly failed transaction metrics
	// Purpose: Generate monthly reports of failed transactions for analysis by merchant_id
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	//   $5: Merchant ID
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no failed transactions
	//   - Returns 0 values for months with no failed transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionFailedByMerchantParams) ([]*GetMonthlyAmountTransactionFailedByMerchantRow, error)
	// GetMonthlyAmountTransactionSuccess: Retrieves monthly success transaction metrics
	// Purpose: Generate monthly reports of successful transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no transactions
	//   - Returns 0 values for months with no successful transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionSuccess(ctx context.Context, arg GetMonthlyAmountTransactionSuccessParams) ([]*GetMonthlyAmountTransactionSuccessRow, error)
	// GetMonthlyAmountTransactionSuccessByMerchant: Retrieves monthly success transaction metrics by merchant_id
	// Purpose: Generate monthly reports of successful transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	//   $5: Merchant ID
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no transactions
	//   - Returns 0 values for months with no successful transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionSuccessByMerchantParams) ([]*GetMonthlyAmountTransactionSuccessByMerchantRow, error)
	// GetMonthlyCashier: Retrieves monthly sales activity for all cashiers within a 1-year period
	// Purpose: Provides cashier performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   cashier_id: Unique identifier for the cashier
	//   cashier_name: Full name of the cashier
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders processed
	//   total_sales: Gross sales amount generated
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted records to maintain data integrity
	//   - Groups results by cashier and month for granular performance tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Orders chronologically for trend analysis
	GetMonthlyCashier(ctx context.Context, dollar_1 time.Time) ([]*GetMonthlyCashierRow, error)
	// GetMonthlyCashierByCashierId: Retrieves monthly sales activity for all cashiers within a 1-year period by cashier id
	// Purpose: Provides cashier performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Reference cashier_id
	// Returns:
	//   cashier_id: Unique identifier for the cashier
	//   cashier_name: Full name of the cashier
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders processed
	//   total_sales: Gross sales amount generated
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted records to maintain data integrity
	//   - Groups results by cashier and month for granular performance tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Orders chronologically for trend analysis
	GetMonthlyCashierByCashierId(ctx context.Context, arg GetMonthlyCashierByCashierIdParams) ([]*GetMonthlyCashierByCashierIdRow, error)
	// GetMonthlyCashierByMerchant: Retrieves monthly sales activity for all cashiers within a 1-year period by merchant id
	// Purpose: Provides cashier performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Reference merchant_id
	// Returns:
	//   cashier_id: Unique identifier for the cashier
	//   cashier_name: Full name of the cashier
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders processed
	//   total_sales: Gross sales amount generated
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted records to maintain data integrity
	//   - Groups results by cashier and month for granular performance tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Orders chronologically for trend analysis
	GetMonthlyCashierByMerchant(ctx context.Context, arg GetMonthlyCashierByMerchantParams) ([]*GetMonthlyCashierByMerchantRow, error)
	// GetMonthlyCategory: Retrieves monthly sales activity for all categories within a 1-year period
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategory(ctx context.Context, dollar_1 time.Time) ([]*GetMonthlyCategoryRow, error)
	// GetMonthlyCategoryById: Retrieves monthly sales activity for all categories within a 1-year period by category_id
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Category ID
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategoryById(ctx context.Context, arg GetMonthlyCategoryByIdParams) ([]*GetMonthlyCategoryByIdRow, error)
	// GetMonthlyCategoryByMerchant: Retrieves monthly sales activity for all categories within a 1-year period by merchant_id
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Merchant ID
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategoryByMerchant(ctx context.Context, arg GetMonthlyCategoryByMerchantParams) ([]*GetMonthlyCategoryByMerchantRow, error)
	// GetMonthlyOrder: Retrieves monthly order summary within a 1-year period
	// Purpose: Provides monthly sales performance metrics for trend and operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis window
	// Returns:
	//   month: 3-letter abbreviation of the month (e.g., 'Jan')
	//   order_count: Total number of orders in the month
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in that month
	// Business Logic:
	//   - Analyzes a 12-month period starting from the month of the reference date
	//   - Ignores soft-deleted records for accurate reporting
	//   - Aggregates data by month for visualizations and monthly performance tracking
	//   - Uses short month format for dashboard/chart compactness
	//   - Sorts chronologically by month
	GetMonthlyOrder(ctx context.Context, dollar_1 time.Time) ([]*GetMonthlyOrderRow, error)
	// GetMonthlyOrderByMerchant: Retrieves monthly order summary within a 1-year period by merchant_id
	// Purpose: Provides monthly sales performance metrics for trend and operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis window
	//   $2: Merchant ID
	// Returns:
	//   month: 3-letter abbreviation of the month (e.g., 'Jan')
	//   order_count: Total number of orders in the month
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in that month
	// Business Logic:
	//   - Analyzes a 12-month period starting from the month of the reference date
	//   - Ignores soft-deleted records for accurate reporting
	//   - Aggregates data by month for visualizations and monthly performance tracking
	//   - Uses short month format for dashboard/chart compactness
	//   - Sorts chronologically by month
	GetMonthlyOrderByMerchant(ctx context.Context, arg GetMonthlyOrderByMerchantParams) ([]*GetMonthlyOrderByMerchantRow, error)
	// GetMonthlyTotalPrice: Retrieves monthly revenue totals across two comparison periods
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPrice(ctx context.Context, arg GetMonthlyTotalPriceParams) ([]*GetMonthlyTotalPriceRow, error)
	// GetMonthlyTotalPriceById: Retrieves monthly revenue totals across two comparison periods by category_id
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Category ID
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPriceById(ctx context.Context, arg GetMonthlyTotalPriceByIdParams) ([]*GetMonthlyTotalPriceByIdRow, error)
	// GetMonthlyTotalPriceByMerchant: Retrieves monthly revenue totals across two comparison periods by merchant_id
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Merchant ID
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPriceByMerchant(ctx context.Context, arg GetMonthlyTotalPriceByMerchantParams) ([]*GetMonthlyTotalPriceByMerchantRow, error)
	// GetMonthlyTotalRevenue: Retrieves monthly total revenue across two custom date ranges
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenue(ctx context.Context, arg GetMonthlyTotalRevenueParams) ([]*GetMonthlyTotalRevenueRow, error)
	// GetMonthlyTotalRevenueById: Retrieves monthly total revenue across two custom date ranges by order_id
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	//   $5: Order ID
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenueById(ctx context.Context, arg GetMonthlyTotalRevenueByIdParams) ([]*GetMonthlyTotalRevenueByIdRow, error)
	// GetMonthlyTotalRevenueByMerchant: Retrieves monthly total revenue across two custom date ranges by merchant_id
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	//   $5: Order ID
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenueByMerchant(ctx context.Context, arg GetMonthlyTotalRevenueByMerchantParams) ([]*GetMonthlyTotalRevenueByMerchantRow, error)
	// GetMonthlyTotalSalesById: Retrieves monthly sales totals filtered by cashier ID
	// Purpose: Provides monthly sales analytics for a specific merchant across two time periods
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Cashier ID to filter by
	// Returns:
	//   year: Year of sales data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_sales: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares sales between two customizable time windows (e.g. this month vs last month)
	//   - Ensures all months appear in results even with no sales (gap filling)
	//   - Only includes active/non-deleted orders and cashiers
	//   - Formats output for easy display in reports/dashboards
	GetMonthlyTotalSalesById(ctx context.Context, arg GetMonthlyTotalSalesByIdParams) ([]*GetMonthlyTotalSalesByIdRow, error)
	// GetMonthlyTotalSalesByMerchant: Retrieves monthly sales totals filtered by merchant ID
	// Purpose: Provides monthly sales analytics for a specific merchant across two time periods
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Merchant ID to filter by
	// Returns:
	//   year: Year of sales data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_sales: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares sales between two customizable time windows (e.g. this month vs last month)
	//   - Ensures all months appear in results even with no sales (gap filling)
	//   - Only includes active/non-deleted orders and cashiers
	//   - Formats output for easy display in reports/dashboards
	GetMonthlyTotalSalesByMerchant(ctx context.Context, arg GetMonthlyTotalSalesByMerchantParams) ([]*GetMonthlyTotalSalesByMerchantRow, error)
	// GetMonthlyTotalSalesCashier: Retrieves monthly sales totals for cashiers across two date ranges
	// Purpose: Compare sales performance between two time periods (typically current vs previous period)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	// Returns:
	//   year: The year of the sales data
	//   month_name: The full month name (e.g., "January")
	//   total_sales: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares sales between two customizable time windows (e.g. this month vs last month)
	//   - Ensures all months appear in results even with no sales (gap filling)
	//   - Only includes active/non-deleted orders and cashiers
	//   - Formats output for easy display in reports/dashboards
	GetMonthlyTotalSalesCashier(ctx context.Context, arg GetMonthlyTotalSalesCashierParams) ([]*GetMonthlyTotalSalesCashierRow, error)
	// GetMonthlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method monthly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetMonthlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantFailedParams) ([]*GetMonthlyTransactionMethodsByMerchantFailedRow, error)
	// GetMonthlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method monthly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetMonthlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantSuccessParams) ([]*GetMonthlyTransactionMethodsByMerchantSuccessRow, error)
	// GetMonthlyTransactionMethodsFailed: Analyzes failed payment method usage by month
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetMonthlyTransactionMethodsFailed(ctx context.Context, arg GetMonthlyTransactionMethodsFailedParams) ([]*GetMonthlyTransactionMethodsFailedRow, error)
	// GetMonthlyTransactionMethodsSuccess: Analyzes successful payment method usage by month
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetMonthlyTransactionMethodsSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsSuccessParams) ([]*GetMonthlyTransactionMethodsSuccessRow, error)
	// GetOrderByID: Retrieves an active order by ID
	// Purpose: Fetch order details for display/processing
	// Parameters:
	//   $1: order_id - UUID of the order to retrieve
	// Returns: Full order record if found and active
	// Business Logic:
	//   - Excludes soft-deleted orders
	//   - Used for order viewing, receipts, and processing
	//   - Typically joined with order_items in application
	GetOrderByID(ctx context.Context, orderID int32) (*Order, error)
	// GetOrderItems: Retrieves active order items with pagination and search
	// Purpose: Provides paginated listing of non-deleted order items for display or reporting
	// Parameters:
	//   $1: Search keyword (matches order_id or product_id, optional)
	//   $2: Limit (number of records per page)
	//   $3: Offset (starting record index)
	// Returns:
	//   All matching order item fields
	//   total_count: Total number of results ignoring pagination (for frontend pagination UI)
	// Business Logic:
	//   - Filters out soft-deleted items
	//   - Supports keyword-based filtering
	//   - Includes total result count via window function
	GetOrderItems(ctx context.Context, arg GetOrderItemsParams) ([]*GetOrderItemsRow, error)
	// GetOrderItemsActive: Retrieves active order items (duplicate-safe with GetOrderItems)
	// Purpose: Lists active (non-deleted) order items with pagination and optional search
	// Parameters:
	//   $1: Search keyword (order_id or product_id, optional)
	//   $2: Limit (pagination size)
	//   $3: Offset (pagination start)
	// Returns:
	//   Order item fields plus total matching count
	// Business Logic:
	//   - Behaves similarly to GetOrderItems
	//   - Used when clarity between active/trashed context is required
	GetOrderItemsActive(ctx context.Context, arg GetOrderItemsActiveParams) ([]*GetOrderItemsActiveRow, error)
	// GetOrderItemsByOrder: Retrieves active order items for a specific order
	// Purpose: Fetches all non-deleted order items under one order
	// Parameters:
	//   $1: order_id
	// Returns:
	//   List of active order items
	// Business Logic:
	//   - Excludes soft-deleted entries
	GetOrderItemsByOrder(ctx context.Context, orderID int32) ([]*OrderItem, error)
	// GetOrderItemsTrashed: Retrieves soft-deleted order items with pagination
	// Purpose: Allows review and management of trashed order items
	// Parameters:
	//   $1: Search keyword (order_id or product_id, optional)
	//   $2: Limit (number of rows per page)
	//   $3: Offset (starting point for pagination)
	// Returns:
	//   All matching deleted order item fields
	//   total_count: Total number of trashed results
	// Business Logic:
	//   - Only includes records with non-null deleted_at (trashed)
	//   - Enables optional keyword search and pagination
	//   - Sorted by deletion date for recent trash activity review
	GetOrderItemsTrashed(ctx context.Context, arg GetOrderItemsTrashedParams) ([]*GetOrderItemsTrashedRow, error)
	// GetOrders: Retrieves paginated list of active orders with search capability
	// Purpose: List all active orders for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter orders by ID or total price (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All order fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted orders (deleted_at IS NULL)
	//   - Supports partial text matching on order_id and total_price fields (case-insensitive)
	//   - Returns newest orders first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetOrders(ctx context.Context, arg GetOrdersParams) ([]*GetOrdersRow, error)
	// GetOrdersActive: Retrieves paginated list of active orders (identical to GetOrders)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for order ID or price
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active order records with total_count
	// Business Logic:
	//   - Same functionality as GetOrders
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetOrders if duplicate functionality is undesired
	GetOrdersActive(ctx context.Context, arg GetOrdersActiveParams) ([]*GetOrdersActiveRow, error)
	// GetOrdersByMerchant: Retrieves merchant-specific orders with pagination
	// Purpose: List orders filtered by merchant ID
	// Parameters:
	//   $1: search_term - Optional text to filter orders
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	//   $4: merchant_id - Optional merchant UUID to filter by (NULL for all merchants)
	// Returns:
	//   Order records with total_count
	// Business Logic:
	//   - Combines merchant filtering with search functionality
	//   - Maintains same sorting and pagination as other order queries
	//   - Useful for merchant-specific order dashboards
	//   - NULL merchant_id parameter returns all merchants' orders
	GetOrdersByMerchant(ctx context.Context, arg GetOrdersByMerchantParams) ([]*GetOrdersByMerchantRow, error)
	// GetOrdersTrashed: Retrieves paginated list of soft-deleted orders
	// Purpose: View and manage deleted orders for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed orders
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed order records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active order queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in order recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetOrdersTrashed(ctx context.Context, arg GetOrdersTrashedParams) ([]*GetOrdersTrashedRow, error)
	// GetProductByID: Retrieves active product by ID
	// Purpose: Fetch product details for display/purchase
	// Parameters:
	//   $1: product_id - ID of product to retrieve
	// Returns: Full product record if active
	// Business Logic:
	//   - Excludes deleted products
	//   - Used for product pages and checkout
	GetProductByID(ctx context.Context, productID int32) (*Product, error)
	// GetProductByIdTrashed: Retrieves product including deleted
	// Purpose: View deleted products for restoration
	// Parameters:
	//   $1: product_id - ID of product to retrieve
	// Returns: Product record regardless of deletion status
	// Business Logic:
	//   - Bypasses deleted_at filter
	//   - Used in admin/recovery interfaces
	GetProductByIdTrashed(ctx context.Context, productID int32) (*Product, error)
	// GetProducts: Retrieves paginated list of active products with search capability
	// Purpose: List all active (non-deleted) products for display in UI
	// Parameters:
	//   $1: search_term - Optional text to filter products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Orders results by newest first (created_at DESC)
	//   - Uses COUNT(*) OVER() to include total matching record count for pagination UI
	GetProducts(ctx context.Context, arg GetProductsParams) ([]*GetProductsRow, error)
	// GetProductsActive: Retrieves paginated list of active products (duplicate of GetProducts)
	// Purpose: Explicitly return active (non-deleted) products with search capability
	// Parameters:
	//   $1: search_term - Optional text to filter products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Ordered by newest first (created_at DESC)
	//   - Useful if frontend/backend wants clearer distinction in naming
	GetProductsActive(ctx context.Context, arg GetProductsActiveParams) ([]*GetProductsActiveRow, error)
	// GetProductsByCategoryName: Retrieves paginated and filtered products under a specific category name
	// Purpose: Display products by category for customers or category-focused pages
	// Parameters:
	//   $1: category_name - The name of the category to filter by
	//   $2: search_term - Optional text to filter by product name or description
	//   $3: min_price - Minimum price filter (0 to ignore)
	//   $4: max_price - Maximum price filter (0 to ignore, defaults to very high value)
	//   $5: limit - Number of products to return (pagination)
	//   $6: offset - Number of products to skip (pagination)
	// Returns:
	//   - Filtered list of product fields including category name
	//   - total_count of all matching products for pagination UI
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Matches category name exactly
	//   - Supports case-insensitive partial search on name and description
	//   - Filters by category ID only if provided
	//   - Filters by price range only if values provided
	//   - Ordered by newest products first (created_at DESC)
	GetProductsByCategoryName(ctx context.Context, arg GetProductsByCategoryNameParams) ([]*GetProductsByCategoryNameRow, error)
	// GetProductsByMerchant: Retrieves paginated and filtered products owned by a specific merchant
	// Purpose: Allow merchants to view and manage their own products with advanced filtering options
	// Parameters:
	//   $1: merchant_id - Filter products belonging to this merchant
	//   $2: search_term - Optional text to filter by product name or description
	//   $3: category_id - Optional category filter (0 or NULL to ignore)
	//   $4: min_price - Minimum price filter (0 to ignore)
	//   $5: max_price - Maximum price filter (0 to ignore, defaults to very high value)
	//   $6: limit - Number of products to return (pagination)
	//   $7: offset - Number of products to skip (pagination)
	// Returns:
	//   - Filtered list of product fields including category name
	//   - total_count of all matching products for pagination UI
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports case-insensitive partial search on name and description
	//   - Filters by category ID only if provided
	//   - Filters by price range only if values provided (>= min_price and <= max_price)
	//   - Ordered by newest products first (created_at DESC)
	GetProductsByMerchant(ctx context.Context, arg GetProductsByMerchantParams) ([]*GetProductsByMerchantRow, error)
	// GetProductsTrashed: Retrieves paginated list of trashed (soft-deleted) products
	// Purpose: List deleted products for admin to manage recovery or audit
	// Parameters:
	//   $1: search_term - Optional text to filter trashed products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching trashed records
	// Business Logic:
	//   - Includes only soft-deleted products (deleted_at IS NOT NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Returns by newest first (created_at DESC)
	//   - Used for "Trash Bin" UI or soft-delete management
	GetProductsTrashed(ctx context.Context, arg GetProductsTrashedParams) ([]*GetProductsTrashedRow, error)
	// GetRole: Retrieves role details by role_id
	// Purpose: Fetch a single role record (regardless of deleted status)
	// Parameters:
	//   $1: Role ID
	// Returns:
	//   role_id, role_name, and timestamps
	GetRole(ctx context.Context, roleID int32) (*Role, error)
	// GetRoleByName: Retrieves role by exact role name
	// Purpose: Check role existence or fetch role info based on name
	// Parameters:
	//   $1: Role name (exact match)
	// Returns:
	//   role_id, role_name, and timestamps
	GetRoleByName(ctx context.Context, roleName string) (*Role, error)
	// GetRoles: Retrieves all roles (active & trashed) with optional name search and pagination
	// Purpose: General listing of roles regardless of status
	// Parameters:
	//   $1: Search query (role name, nullable)
	//   $2: Limit (number of records per page)
	//   $3: Offset (starting index for pagination)
	// Returns:
	//   role_id, role_name, timestamps, and total_count (for pagination support)
	// Business Logic:
	//   - Supports fuzzy search on role_name
	//   - Includes both active and trashed roles
	//   - Useful for admin panels with filters and pagination
	GetRoles(ctx context.Context, arg GetRolesParams) ([]*GetRolesRow, error)
	// GetTransactionByID: Retrieves transaction by transaction ID
	// Purpose: Fetch specific transaction details
	// Parameters:
	//   $1: transaction_id - The unique transaction ID
	// Returns: Full transaction record if active
	// Business Logic:
	//   - Excludes deleted transactions
	//   - Used for transaction details/receipts
	//   - Primary lookup for transaction management
	GetTransactionByID(ctx context.Context, transactionID int32) (*Transaction, error)
	// GetTransactionByMerchant: Retrieves merchant-specific transactions with pagination
	// Purpose: List transactions filtered by merchant ID
	// Parameters:
	//   $1: search_term - Optional text to filter transactions
	//   $2: merchant_id - Optional merchant ID to filter by (NULL for all merchants)
	//   $3: limit - Pagination limit
	//   $4: offset - Pagination offset
	// Returns:
	//   Transaction records with total_count
	// Business Logic:
	//   - Combines merchant filtering with search functionality
	//   - Maintains same sorting and pagination as other transaction queries
	//   - Useful for merchant-specific transaction reporting
	//   - NULL merchant_id parameter returns all merchants' transactions
	GetTransactionByMerchant(ctx context.Context, arg GetTransactionByMerchantParams) ([]*GetTransactionByMerchantRow, error)
	// GetTransactionByOrderID: Retrieves transaction by order reference
	// Purpose: Lookup transaction associated with specific order
	// Parameters:
	//   $1: order_id - The order ID to search by
	// Returns: Transaction record if found and active
	// Business Logic:
	//   - Only returns non-deleted transactions
	//   - Used for order payment verification
	//   - Helps prevent duplicate payments
	GetTransactionByOrderID(ctx context.Context, orderID int32) (*Transaction, error)
	// GetTransactions: Retrieves paginated list of active transactions with search capability
	// Purpose: List all active transactions for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter transactions by payment method or status (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All transaction fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted transactions (deleted_at IS NULL)
	//   - Supports partial text matching on payment_method and payment_status fields (case-insensitive)
	//   - Returns newest transactions first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]*GetTransactionsRow, error)
	// GetTransactionsActive: Retrieves paginated list of active transactions (identical to GetTransactions)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for payment method/status
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active transaction records with total_count
	// Business Logic:
	//   - Same functionality as GetTransactions
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetTransactions if duplicate functionality is undesired
	GetTransactionsActive(ctx context.Context, arg GetTransactionsActiveParams) ([]*GetTransactionsActiveRow, error)
	// GetTransactionsTrashed: Retrieves paginated list of soft-deleted transactions
	// Purpose: View and manage deleted transactions for audit/recovery
	// Parameters:
	//   $1: search_term - Optional text to filter trashed transactions
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed transaction records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active transaction queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in transaction recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetTransactionsTrashed(ctx context.Context, arg GetTransactionsTrashedParams) ([]*GetTransactionsTrashedRow, error)
	// GetTrashedRoles: Retrieves only soft-deleted roles with optional search and pagination
	// Purpose: For trash/recycle bin management
	// Parameters:
	//   $1: Search query (nullable)
	//   $2: Limit
	//   $3: Offset
	// Returns:
	//   role_id, role_name, timestamps, and total_count
	GetTrashedRoles(ctx context.Context, arg GetTrashedRolesParams) ([]*GetTrashedRolesRow, error)
	// GetTrashedUserRoles: Retrieves all soft-deleted roles for a given user
	// Purpose: Review previously deleted role assignments for recovery or audit
	// Parameters:
	//   $1: User ID
	// Returns:
	//   user_role_id, user_id, role_id, role_name, timestamps
	// Business Logic:
	//   - Joins with roles to show role name
	//   - Orders by most recently trashed
	GetTrashedUserRoles(ctx context.Context, userID int32) ([]*GetTrashedUserRolesRow, error)
	// GetUserByEmail: Retrieves active user by email
	// Purpose: Lookup user by email address (for authentication)
	// Parameters:
	//   $1: email - Exact email address to search for
	// Returns: User record if found and active
	// Business Logic:
	//   - Case-sensitive exact match on email
	//   - Excludes deleted users
	//   - Used during login/authentication flows
	//   - Helps prevent duplicate accounts
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	// GetUserByID: Retrieves active user by ID
	// Purpose: Fetch specific user details
	// Parameters:
	//   $1: user_id - ID of user to retrieve
	// Returns: Full user record if found and active
	// Business Logic:
	//   - Excludes deleted users
	//   - Used for user profile viewing/editing
	//   - Primary lookup for user management
	GetUserByID(ctx context.Context, userID int32) (*User, error)
	// GetUserRoles: Retrieves all roles assigned to a specific user
	// Purpose: Identify the access level(s) of a user
	// Parameters:
	//   $1: User ID
	// Returns:
	//   List of roles (id, name, timestamps)
	GetUserRoles(ctx context.Context, userID int32) ([]*Role, error)
	// GetUserTrashed: Retrieves paginated list of soft-deleted users
	// Purpose: View and manage deleted users for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed users
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed user records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active user queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in user recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetUserTrashed(ctx context.Context, arg GetUserTrashedParams) ([]*GetUserTrashedRow, error)
	// GetUsers: Retrieves paginated list of active users with search capability
	// Purpose: List all active users for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter users by name or email (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All user fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted users (deleted_at IS NULL)
	//   - Supports partial text matching on firstname, lastname, and email fields (case-insensitive)
	//   - Returns newest users first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*GetUsersRow, error)
	// GetUsersActive: Retrieves paginated list of active users (identical to GetUsers)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for name/email
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active user records with total_count
	// Business Logic:
	//   - Same functionality as GetUsers
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetUsers if duplicate functionality is undesired
	GetUsersActive(ctx context.Context, arg GetUsersActiveParams) ([]*GetUsersActiveRow, error)
	// GetYearlyAmountTransactionFailed: Retrieves yearly failed transaction metrics
	// Purpose: Generate annual reports of failed transactions
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	// Returns:
	//   year: Year as text
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no failed transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionFailed(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionFailedRow, error)
	// GetYearlyAmountTransactionFailedByMerchant: Retrieves yearly failed transaction metrics
	// Purpose: Generate annual reports of failed transactions by merchant_id
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no failed transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetYearlyAmountTransactionFailedByMerchantParams) ([]*GetYearlyAmountTransactionFailedByMerchantRow, error)
	// GetYearlyAmountTransactionSuccess: Retrieves yearly success transaction metrics
	// Purpose: Generate annual reports of successful transactions
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	// Returns:
	//   year: Year as text
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no successful transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionSuccess(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionSuccessRow, error)
	// GetYearlyAmountTransactionSuccessByMerchant: Retrieves yearly success transaction metrics
	// Purpose: Generate annual reports of successful transactions by merchant_id
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no successful transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetYearlyAmountTransactionSuccessByMerchantParams) ([]*GetYearlyAmountTransactionSuccessByMerchantRow, error)
	// GetYearlyCashier: Retrieves annual sales performance for cashiers over 5-year span
	// Purpose: Enables long-term cashier productivity trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   cashier_id: Unique cashier identifier
	//   cashier_name: Full name of the cashier
	//   order_count: Annual transaction volume
	//   total_sales: Yearly revenue generated
	// Business Logic:
	//   - Covers current year plus previous 4 years (5-year total window)
	//   - Maintains data quality by excluding soft-deleted records
	//   - Provides both quantitative (order count) and financial (sales) metrics
	//   - Orders results chronologically then by cashier for consistent reporting
	//   - Designed for workforce planning and incentive calculations
	GetYearlyCashier(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyCashierRow, error)
	// GetYearlyCashierByCashierId: Retrieves annual sales performance for cashiers over 5-year span by cashier id
	// Purpose: Enables long-term cashier productivity trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Reference cashier_id
	// Returns:
	//   year: 4-digit year as text
	//   cashier_id: Unique cashier identifier
	//   cashier_name: Full name of the cashier
	//   order_count: Annual transaction volume
	//   total_sales: Yearly revenue generated
	// Business Logic:
	//   - Covers current year plus previous 4 years (5-year total window)
	//   - Maintains data quality by excluding soft-deleted records
	//   - Provides both quantitative (order count) and financial (sales) metrics
	//   - Orders results chronologically then by cashier for consistent reporting
	//   - Designed for workforce planning and incentive calculations
	GetYearlyCashierByCashierId(ctx context.Context, arg GetYearlyCashierByCashierIdParams) ([]*GetYearlyCashierByCashierIdRow, error)
	// GetYearlyCashierByMerchant: Retrieves annual sales performance for cashiers over 5-year span by merchant id
	// Purpose: Enables long-term cashier productivity trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Reference cashier_id
	// Returns:
	//   year: 4-digit year as text
	//   cashier_id: Unique cashier identifier
	//   cashier_name: Full name of the cashier
	//   order_count: Annual transaction volume
	//   total_sales: Yearly revenue generated
	// Business Logic:
	//   - Covers current year plus previous 4 years (5-year total window)
	//   - Maintains data quality by excluding soft-deleted records
	//   - Provides both quantitative (order count) and financial (sales) metrics
	//   - Orders results chronologically then by cashier for consistent reporting
	//   - Designed for workforce planning and incentive calculations
	GetYearlyCashierByMerchant(ctx context.Context, arg GetYearlyCashierByMerchantParams) ([]*GetYearlyCashierByMerchantRow, error)
	// GetYearlyCategory: Retrieves annual sales performance for categories over a 5-year span
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategory(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyCategoryRow, error)
	// GetYearlyCategoryById: Retrieves annual sales performance for categories over a 5-year span by category_id
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Category ID
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategoryById(ctx context.Context, arg GetYearlyCategoryByIdParams) ([]*GetYearlyCategoryByIdRow, error)
	// GetYearlyCategoryByMerchant: Retrieves annual sales performance for categories over a 5-year span by merchant_id
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Merchant ID
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategoryByMerchant(ctx context.Context, arg GetYearlyCategoryByMerchantParams) ([]*GetYearlyCategoryByMerchantRow, error)
	// GetYearlyOrder: Retrieves yearly order summary over the past 5 years
	// Purpose: Enables long-term trend analysis of sales performance
	// Parameters:
	//   $1: Reference date (timestamp) - defines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as string
	//   order_count: Total number of orders in the year
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in the year
	//   active_cashiers: Number of distinct cashier IDs involved in transactions
	//   unique_products_sold: Number of unique products sold
	// Business Logic:
	//   - Covers a rolling 5-year window up to the reference year
	//   - Filters out deleted records to ensure data consistency
	//   - Useful for high-level KPI tracking, forecasting, and strategic planning
	//   - Includes both volume and revenue metrics for comprehensive reporting
	//   - Results sorted by year in ascending order
	GetYearlyOrder(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyOrderRow, error)
	// GetYearlyOrderByMerchant: Retrieves yearly order summary over the past 5 years by merchant_id
	// Purpose: Enables long-term trend analysis of sales performance
	// Parameters:
	//   $1: Reference date (timestamp) - defines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as string
	//   order_count: Total number of orders in the year
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in the year
	//   active_cashiers: Number of distinct cashier IDs involved in transactions
	//   unique_products_sold: Number of unique products sold
	// Business Logic:
	//   - Covers a rolling 5-year window up to the reference year
	//   - Filters out deleted records to ensure data consistency
	//   - Useful for high-level KPI tracking, forecasting, and strategic planning
	//   - Includes both volume and revenue metrics for comprehensive reporting
	//   - Results sorted by year in ascending order
	GetYearlyOrderByMerchant(ctx context.Context, arg GetYearlyOrderByMerchantParams) ([]*GetYearlyOrderByMerchantRow, error)
	// GetYearlyTotalPrice: Retrieves annual revenue with category/product validation
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPrice(ctx context.Context, dollar_1 int32) ([]*GetYearlyTotalPriceRow, error)
	// GetYearlyTotalPriceById: Retrieves annual revenue with category/product validation by category_id
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	//   $2: Category ID
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPriceById(ctx context.Context, arg GetYearlyTotalPriceByIdParams) ([]*GetYearlyTotalPriceByIdRow, error)
	// GetYearlyTotalPriceByMerchant: Retrieves annual revenue with category/product validation by merchant_id
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPriceByMerchant(ctx context.Context, arg GetYearlyTotalPriceByMerchantParams) ([]*GetYearlyTotalPriceByMerchantRow, error)
	// GetYearlyTotalRevenue: Retrieves yearly total revenue for current and previous year
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenue(ctx context.Context, dollar_1 int32) ([]*GetYearlyTotalRevenueRow, error)
	// GetYearlyTotalRevenueById: Retrieves yearly total revenue for current and previous year by order_id
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	//   $2: Order ID
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenueById(ctx context.Context, arg GetYearlyTotalRevenueByIdParams) ([]*GetYearlyTotalRevenueByIdRow, error)
	// GetYearlyTotalRevenueByMerchant: Retrieves yearly total revenue for current and previous year by merchant_id
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	//   $2: Order ID
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenueByMerchant(ctx context.Context, arg GetYearlyTotalRevenueByMerchantParams) ([]*GetYearlyTotalRevenueByMerchantRow, error)
	// GetYearlyTotalSalesById: Retrieves yearly sales totals filtered by cashier ID
	// Purpose: Provides year-over-year sales comparison for a specific cashier
	// Parameters:
	//   $1: Current year to analyze (integer)
	//   $2: Merchant ID to filter by
	// Returns:
	//   year: Year as text
	//   total_sales: Annual sales total (0 if no sales)
	// Business Logic:
	//   - Automatically compares current year with previous year
	//   - Includes zero-value years for complete reporting
	//   - Filters by cashier while maintaining data integrity
	GetYearlyTotalSalesById(ctx context.Context, arg GetYearlyTotalSalesByIdParams) ([]*GetYearlyTotalSalesByIdRow, error)
	// GetYearlyTotalSalesByMerchant: Retrieves yearly sales totals filtered by merchant ID
	// Purpose: Provides year-over-year sales comparison for a specific merchant
	// Parameters:
	//   $1: Current year to analyze (integer)
	//   $2: Merchant ID to filter by
	// Returns:
	//   year: Year as text
	//   total_sales: Annual sales total (0 if no sales)
	// Business Logic:
	//   - Automatically compares current year with previous year
	//   - Includes zero-value years for complete reporting
	//   - Filters by merchant while maintaining data integrity
	GetYearlyTotalSalesByMerchant(ctx context.Context, arg GetYearlyTotalSalesByMerchantParams) ([]*GetYearlyTotalSalesByMerchantRow, error)
	// GetYearlyTotalSalesCashier: Retrieves yearly sales totals for cashiers across current and previous year
	// Purpose: Year-over-year sales comparison
	// Parameters:
	//   $1: The current year (integer)
	// Returns:
	//   year: The year as text
	//   total_sales: Sum of order totals for that year (0 if no sales)
	// Business Logic:
	//   - Automatically compares current year with previous year
	//   - Includes zero-value years for complete reporting
	//   - Filters by merchant while maintaining data integrity
	GetYearlyTotalSalesCashier(ctx context.Context, dollar_1 int32) ([]*GetYearlyTotalSalesCashierRow, error)
	// GetYearlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method yearly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetYearlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantFailedParams) ([]*GetYearlyTransactionMethodsByMerchantFailedRow, error)
	// GetYearlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method yearly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetYearlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantSuccessParams) ([]*GetYearlyTransactionMethodsByMerchantSuccessRow, error)
	// GetYearlyTransactionMethodsFailed: Analyzes failed payment method usage by year
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetYearlyTransactionMethodsFailed(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsFailedRow, error)
	// GetYearlyTransactionMethodsSuccess: Analyzes successful payment method usage by year
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetYearlyTransactionMethodsSuccess(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsSuccessRow, error)
	// RemoveRoleFromUser: Permanently removes a role from a user
	// Purpose: Hard delete of a user-role mapping (bypasses trash)
	// Parameters:
	//   $1: User ID
	//   $2: Role ID
	// Business Logic:
	//   - Deletes the record instead of soft-deleting
	//   - Use cautiously if audit/history is important
	RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error
	// RestoreAllCashiers: Mass restoration of deleted cashiers
	// Purpose: Recover all trashed cashiers at once
	// Business Logic:
	//   - Reactivates all soft-deleted cashiers
	//   - No parameters needed
	//   - Useful for system recovery scenarios
	RestoreAllCashiers(ctx context.Context) error
	// RestoreAllCategories: Recovers all trashed categories
	// Purpose: Bulk restore of all soft-deleted category records
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Resets deleted_at for all soft-deleted records
	RestoreAllCategories(ctx context.Context) error
	// RestoreAllMerchants: Mass restoration of deleted merchants
	// Purpose: Recover all trashed merchants at once
	// Business Logic:
	//   - Reactivates all soft-deleted merchants
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	//   - Maintains original merchant data
	RestoreAllMerchants(ctx context.Context) error
	// RestoreAllOrders: Mass restoration of cancelled orders
	// Purpose: Recover all trashed orders at once
	// Business Logic:
	//   - Reactivates all soft-deleted orders
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	RestoreAllOrders(ctx context.Context) error
	// RestoreAllOrdersItem: Restores all soft-deleted order items
	// Purpose: Mass recovery of trashed items
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Resets deleted_at to NULL for all trashed items
	RestoreAllOrdersItem(ctx context.Context) error
	// RestoreAllProducts: Mass restoration of deleted products
	// Purpose: Reactivate all trashed products
	// Business Logic:
	//   - Bulk restore operation
	//   - Used during data recovery
	RestoreAllProducts(ctx context.Context) error
	// RestoreAllRoles: Restores all soft-deleted roles in bulk
	// Purpose: Bulk recovery of all trashed roles
	// Parameters: None
	RestoreAllRoles(ctx context.Context) error
	// RestoreAllTransactions: Mass restoration of cancelled transactions
	// Purpose: Recover all trashed transactions at once
	// Business Logic:
	//   - Reactivates all soft-deleted transactions
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	RestoreAllTransactions(ctx context.Context) error
	// RestoreAllUsers: Mass restoration of deleted users
	// Purpose: Recover all trashed users at once
	// Business Logic:
	//   - Reactivates all soft-deleted users
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	//   - Maintains all original user data
	RestoreAllUsers(ctx context.Context) error
	// RestoreCashier: Recovers a soft-deleted cashier
	// Purpose: Reactivate a previously trashed cashier
	// Parameters:
	//   $1: cashier_id - ID of cashier to restore
	// Returns: The restored cashier record
	// Business Logic:
	//   - Nullifies the deleted_at field
	//   - Only works on previously deleted records
	//   - Maintains all original data
	RestoreCashier(ctx context.Context, cashierID int32) (*Cashier, error)
	// RestoreCategory: Recovers a previously trashed category
	// Purpose: Restores a soft-deleted category for reuse
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   Restored category record
	// Business Logic:
	//   - Only applies to categories currently marked as deleted
	RestoreCategory(ctx context.Context, categoryID int32) (*Category, error)
	// RestoreMerchant: Recovers a soft-deleted merchant
	// Purpose: Reactivate a previously deactivated merchant
	// Parameters:
	//   $1: merchant_id - ID of merchant to restore
	// Returns: The restored merchant record
	// Business Logic:
	//   - Nullifies the deleted_at field
	//   - Only works on previously deleted records
	//   - Preserves all original merchant data
	//   - Reactivates associated services
	RestoreMerchant(ctx context.Context, merchantID int32) (*Merchant, error)
	// RestoreOrder: Recovers a soft-deleted order
	// Purpose: Reactivate a cancelled order
	// Parameters:
	//   $1: order_id - UUID of order to restore
	// Returns: The restored order record
	// Business Logic:
	//   - Nullifies deleted_at field
	//   - Only works on previously cancelled orders
	//   - Maintains all original order data
	RestoreOrder(ctx context.Context, orderID int32) (*Order, error)
	// RestoreOrderItem: Restores a previously trashed order item
	// Purpose: Undoes a soft-delete action
	// Parameters:
	//   $1: order_item_id
	// Returns:
	//   The restored order item
	// Business Logic:
	//   - Only restores items currently soft-deleted
	RestoreOrderItem(ctx context.Context, orderItemID int32) (*OrderItem, error)
	// RestoreProduct: Recovers a soft-deleted product
	// Purpose: Reactivate a removed product
	// Parameters:
	//   $1: product_id - Product to restore
	// Returns: The restored product
	// Business Logic:
	//   - Nullifies deleted_at
	//   - Returns product to active status
	RestoreProduct(ctx context.Context, productID int32) (*Product, error)
	// RestoreRole: Restores a previously trashed role
	// Purpose: Undelete a soft-deleted role
	// Parameters:
	//   $1: Role ID
	RestoreRole(ctx context.Context, roleID int32) (*Role, error)
	// RestoreTransaction: Recovers a soft-deleted transaction
	// Purpose: Reactivate a cancelled transaction
	// Parameters:
	//   $1: transaction_id - ID of transaction to restore
	// Returns: The restored transaction record
	// Business Logic:
	//   - Nullifies deleted_at field
	//   - Only works on previously cancelled transactions
	//   - Maintains all original transaction data
	RestoreTransaction(ctx context.Context, transactionID int32) (*Transaction, error)
	// RestoreUser: Recovers a soft-deleted user
	// Purpose: Reactivate a previously deactivated user
	// Parameters:
	//   $1: user_id - ID of user to restore
	// Returns: The restored user record
	// Business Logic:
	//   - Nullifies the deleted_at field
	//   - Only works on previously deleted users
	//   - Restores full account access
	//   - Maintains all original user data
	RestoreUser(ctx context.Context, userID int32) (*User, error)
	// RestoreUserRole: Restores a trashed user-role relation
	// Purpose: Reactivate a previously soft-deleted user-role
	// Parameters:
	//   $1: user_role_id
	// Business Logic:
	//   - Clears the deleted_at field to mark as active again
	RestoreUserRole(ctx context.Context, userRoleID int32) error
	// TrashCashier: Soft-deletes a cashier record
	// Purpose: Remove cashier from active use without permanent deletion
	// Parameters:
	//   $1: cashier_id - ID of cashier to deactivate
	// Returns: The soft-deleted cashier record
	// Business Logic:
	//   - Sets deleted_at timestamp to current time
	//   - Only works on currently active records
	//   - Allows for recovery via restore function
	TrashCashier(ctx context.Context, cashierID int32) (*Cashier, error)
	// TrashCategory: Soft-deletes a category
	// Purpose: Moves category to trash without permanent deletion
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   The soft-deleted category record
	// Business Logic:
	//   - Updates deleted_at with current timestamp
	//   - Prevents repeat trashing of already-deleted records
	TrashCategory(ctx context.Context, categoryID int32) (*Category, error)
	// TrashMerchant: Soft-deletes a merchant account
	// Purpose: Deactivate merchant without permanent deletion
	// Parameters:
	//   $1: merchant_id - ID of merchant to deactivate
	// Returns: The soft-deleted merchant record
	// Business Logic:
	//   - Sets deleted_at timestamp to current time
	//   - Only processes currently active records
	//   - Allows recovery via restore function
	//   - Maintains referential integrity
	TrashMerchant(ctx context.Context, merchantID int32) (*Merchant, error)
	// TrashOrderItem: Soft-deletes a specific order item
	// Purpose: Marks an item as deleted without removing it from DB
	// Parameters:
	//   $1: order_item_id
	// Returns:
	//   The soft-deleted order item
	// Business Logic:
	//   - Preserves record for potential restoration or audit
	TrashOrderItem(ctx context.Context, orderItemID int32) (*OrderItem, error)
	// TrashProduct: Soft-deletes a product
	// Purpose: Remove product from active listings
	// Parameters:
	//   $1: product_id - Product to deactivate
	// Returns: The soft-deleted product
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Preserves product data
	//   - Excludes from active queries
	TrashProduct(ctx context.Context, productID int32) (*Product, error)
	// TrashRole: Soft-deletes a role (moves to trash)
	// Purpose: Mark role as deleted without removing it permanently
	// Parameters:
	//   $1: Role ID
	TrashRole(ctx context.Context, roleID int32) (*Role, error)
	// TrashTransaction: Soft-deletes a transaction
	// Purpose: Void/cancel a transaction without permanent deletion
	// Parameters:
	//   $1: transaction_id - ID of transaction to cancel
	// Returns: The soft-deleted transaction record
	// Business Logic:
	//   - Sets deleted_at to current timestamp
	//   - Preserves transaction for reporting
	//   - Only processes active transactions
	//   - Can be restored if needed
	TrashTransaction(ctx context.Context, transactionID int32) (*Transaction, error)
	// TrashUser: Soft-deletes a user account
	// Purpose: Deactivate user without permanent deletion
	// Parameters:
	//   $1: user_id - ID of user to deactivate
	// Returns: The soft-deleted user record
	// Business Logic:
	//   - Sets deleted_at timestamp to current time
	//   - Only processes currently active users
	//   - Preserves all user data for potential restoration
	//   - Prevents login while deleted
	TrashUser(ctx context.Context, userID int32) (*User, error)
	// TrashUserRole: Soft deletes a user-role mapping (moves to trash)
	// Purpose: Temporarily disable a role assignment without permanent deletion
	// Parameters:
	//   $1: user_role_id (primary key of the mapping)
	// Business Logic:
	//   - Sets deleted_at timestamp, indicating the relation is inactive
	TrashUserRole(ctx context.Context, userRoleID int32) error
	// TrashedOrder: Soft-deletes an order
	// Purpose: Cancel/void an order without permanent deletion
	// Parameters:
	//   $1: order_id - UUID of order to cancel
	// Returns: The soft-deleted order record
	// Business Logic:
	//   - Sets deleted_at to current timestamp
	//   - Preserves order data for reporting
	//   - Only processes active orders
	//   - Can be restored via RestoreOrder
	TrashedOrder(ctx context.Context, orderID int32) (*Order, error)
	// UpdateCashier: Modifies cashier information
	// Purpose: Update cashier details
	// Parameters:
	//   $1: cashier_id - ID of cashier to update
	//   $2: name - New name value
	// Returns: Updated cashier record
	// Business Logic:
	//   - Automatically updates updated_at timestamp
	//   - Only affects active (non-deleted) records
	//   - Returns the modified record for confirmation
	UpdateCashier(ctx context.Context, arg UpdateCashierParams) (*Cashier, error)
	// UpdateCategory: Updates category details
	// Purpose: Modify existing category data while maintaining soft delete integrity
	// Parameters:
	//   $1: Category ID
	//   $2: Updated name
	//   $3: Updated description
	//   $4: Updated slug
	// Returns:
	//   Updated category record
	// Business Logic:
	//   - Automatically updates the updated_at field
	//   - Skips if category has been soft-deleted
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error)
	// UpdateMerchant: Modifies merchant information
	// Purpose: Update merchant profile details
	// Parameters:
	//   $1: merchant_id - Target merchant ID
	//   $2: name - Updated business name
	//   $3: description - Updated description
	//   $4: address - Updated physical address
	//   $5: contact_email - Updated email
	//   $6: contact_phone - Updated phone
	//   $7: status - Updated account status
	// Returns: Updated merchant record
	// Business Logic:
	//   - Automatically updates updated_at timestamp
	//   - Only affects active (non-deleted) records
	//   - Validates all required fields
	//   - Returns modified record for confirmation
	UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (*Merchant, error)
	// UpdateOrder: Modifies order information
	// Purpose: Update order details (primarily total price)
	// Parameters:
	//   $1: order_id - UUID of order to update
	//   $2: total_price - New total amount
	// Returns: Updated order record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active (non-deleted) orders
	//   - Used when order items change
	//   - Should trigger recalculation of total_price
	UpdateOrder(ctx context.Context, arg UpdateOrderParams) (*Order, error)
	// UpdateOrderItem: Updates quantity and price of an existing order item
	// Purpose: Allows modification of product details in an order
	// Parameters:
	//   $1: order_item_id
	//   $2: new quantity
	//   $3: new price
	// Returns:
	//   The updated order item
	// Business Logic:
	//   - Applies changes only to active items
	//   - Automatically updates `updated_at` timestamp
	UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (*OrderItem, error)
	// UpdateProduct: Modifies product information
	// Purpose: Update product details
	// Parameters:
	//   $1: product_id - Target product ID
	//   $2: category_id - Updated category
	//   $3: name - Updated name
	//   $4: description - Updated description
	//   $5: price - Updated price
	//   $6: count_in_stock - Updated inventory count
	//   $7: brand - Updated brand
	//   $8: weight - Updated weight
	//   $9: image_product - Updated image
	//   $10: barcode - Updated barcode
	// Returns: Updated product record
	// Business Logic:
	//   - Auto-updates updated_at
	//   - Only modifies active products
	//   - Validates all fields
	UpdateProduct(ctx context.Context, arg UpdateProductParams) (*Product, error)
	// UpdateProductCountStock: Updates inventory count
	// Purpose: Adjust product stock levels
	// Parameters:
	//   $1: product_id - Product to update
	//   $2: count_in_stock - New inventory count
	// Returns: Updated product record
	// Business Logic:
	//   - Dedicated stock adjustment function
	//   - Used when inventory changes
	//   - Validates non-negative quantity
	UpdateProductCountStock(ctx context.Context, arg UpdateProductCountStockParams) (*Product, error)
	// UpdateRefreshTokenByUserId: Updates refresh token for a user
	// Purpose: Rotate/refresh token for a user
	// Parameters:
	//   $1: user_id - ID of the user to update token for
	//   $2: token - New token string
	//   $3: expiration - New expiration timestamp
	// Business Logic:
	//   - Updates token and expiration fields
	//   - Sets updated_at to current time
	//   - Only modifies active tokens
	//   - Used during token rotation flows
	UpdateRefreshTokenByUserId(ctx context.Context, arg UpdateRefreshTokenByUserIdParams) (*RefreshToken, error)
	// UpdateRole: Updates role name by ID
	// Purpose: Modify role information (e.g., name correction)
	// Parameters:
	//   $1: Role ID
	//   $2: New role name
	// Returns:
	//   Updated role's data
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (*Role, error)
	// UpdateTransaction: Modifies transaction details
	// Purpose: Update transaction information
	// Parameters:
	//   $1: transaction_id - ID of transaction to update
	//   $2: merchant_id - Updated merchant reference
	//   $3: payment_method - Updated payment method
	//   $4: amount - Updated transaction amount
	//   $5: change_amount - Updated change amount
	//   $6: payment_status - Updated payment status
	//   $7: order_id - Updated order reference
	// Returns: Updated transaction record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active transactions
	//   - Validates all payment fields
	//   - Used for payment corrections/updates
	UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (*Transaction, error)
	// UpdateUser: Modifies user account information
	// Purpose: Update user profile details
	// Parameters:
	//   $1: user_id - ID of user to update
	//   $2: firstname - Updated first name
	//   $3: lastname - Updated last name
	//   $4: email - Updated email address
	//   $5: password - New hashed password (optional)
	// Returns: Updated user record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active (non-deleted) users
	//   - Validates email uniqueness
	//   - Password field optional (can maintain existing)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error)
}

var _ Querier = (*Queries)(nil)
