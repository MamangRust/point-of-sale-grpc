// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, description, slug_category, image_category)
VALUES ($1, $2, $3, $4)
  RETURNING category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at
`

type CreateCategoryParams struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	SlugCategory  sql.NullString `json:"slug_category"`
	ImageCategory sql.NullString `json:"image_category"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (*Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.Name,
		arg.Description,
		arg.SlugCategory,
		arg.ImageCategory,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.SlugCategory,
		&i.ImageCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentCategories = `-- name: DeleteAllPermanentCategories :exec
DELETE FROM categories
WHERE
    deleted_at IS NOT NULL
`

// Delete All Trashed Category Permanently
func (q *Queries) DeleteAllPermanentCategories(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentCategories)
	return err
}

const deleteCategoryPermanently = `-- name: DeleteCategoryPermanently :exec
DELETE FROM categories WHERE category_id = $1 AND deleted_at IS NOT NULL
`

// Delete Category Permanently
func (q *Queries) DeleteCategoryPermanently(ctx context.Context, categoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryPermanently, categoryID)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT
    category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM categories
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%' OR slug_category ILIKE '%' || $1 || '%') --
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCategoriesParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetCategoriesRow struct {
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	SlugCategory  sql.NullString `json:"slug_category"`
	ImageCategory sql.NullString `json:"image_category"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Categories with Pagination and Total Count
func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]*GetCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.SlugCategory,
			&i.ImageCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesActive = `-- name: GetCategoriesActive :many
SELECT
    category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM categories
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%' OR slug_category ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCategoriesActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetCategoriesActiveRow struct {
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	SlugCategory  sql.NullString `json:"slug_category"`
	ImageCategory sql.NullString `json:"image_category"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Active Categories with Pagination and Total Count
func (q *Queries) GetCategoriesActive(ctx context.Context, arg GetCategoriesActiveParams) ([]*GetCategoriesActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCategoriesActiveRow
	for rows.Next() {
		var i GetCategoriesActiveRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.SlugCategory,
			&i.ImageCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesTrashed = `-- name: GetCategoriesTrashed :many
SELECT
    category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM categories
WHERE deleted_at IS NOT NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%' OR slug_category ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCategoriesTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetCategoriesTrashedRow struct {
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	SlugCategory  sql.NullString `json:"slug_category"`
	ImageCategory sql.NullString `json:"image_category"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Trashed Categories with Pagination and Total Count
func (q *Queries) GetCategoriesTrashed(ctx context.Context, arg GetCategoriesTrashedParams) ([]*GetCategoriesTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCategoriesTrashedRow
	for rows.Next() {
		var i GetCategoriesTrashedRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.SlugCategory,
			&i.ImageCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at
FROM categories
WHERE category_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetCategoryByID(ctx context.Context, categoryID int32) (*Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.SlugCategory,
		&i.ImageCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const restoreAllCategories = `-- name: RestoreAllCategories :exec
UPDATE categories
SET
    deleted_at = NULL
WHERE
    deleted_at IS NOT NULL
`

// Restore All Trashed Category
func (q *Queries) RestoreAllCategories(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllCategories)
	return err
}

const restoreCategory = `-- name: RestoreCategory :one
UPDATE categories
SET
    deleted_at = NULL
WHERE
    category_id = $1
    AND deleted_at IS NOT NULL
  RETURNING category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at
`

// Restore Trashed Category
func (q *Queries) RestoreCategory(ctx context.Context, categoryID int32) (*Category, error) {
	row := q.db.QueryRowContext(ctx, restoreCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.SlugCategory,
		&i.ImageCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashCategory = `-- name: TrashCategory :one
UPDATE categories
SET
    deleted_at = current_timestamp
WHERE
    category_id = $1
    AND deleted_at IS NULL
    RETURNING category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at
`

// Trash Category
func (q *Queries) TrashCategory(ctx context.Context, categoryID int32) (*Category, error) {
	row := q.db.QueryRowContext(ctx, trashCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.SlugCategory,
		&i.ImageCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2,
    description = $3,
    slug_category = $4,
    image_category = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE category_id = $1
  AND deleted_at IS NULL
  RETURNING category_id, name, description, slug_category, image_category, created_at, updated_at, deleted_at
`

type UpdateCategoryParams struct {
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	SlugCategory  sql.NullString `json:"slug_category"`
	ImageCategory sql.NullString `json:"image_category"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.SlugCategory,
		arg.ImageCategory,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.SlugCategory,
		&i.ImageCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
