definitions:
  requests.AuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  requests.CreateCashierRequest:
    properties:
      merchant_id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    required:
    - merchant_id
    - name
    - user_id
    type: object
  requests.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug_category:
        type: string
    required:
    - description
    - name
    type: object
  requests.CreateMerchantRequest:
    properties:
      address:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      description:
        type: string
      name:
        type: string
      status:
        type: string
      user_id:
        type: integer
    required:
    - address
    - contact_email
    - contact_phone
    - description
    - name
    - status
    - user_id
    type: object
  requests.CreateOrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  requests.CreateOrderRequest:
    properties:
      cashier_id:
        type: integer
      items:
        items:
          $ref: '#/definitions/requests.CreateOrderItemRequest'
        type: array
      merchant_id:
        type: integer
    required:
    - cashier_id
    - items
    - merchant_id
    type: object
  requests.CreateRoleRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requests.CreateTransactionRequest:
    properties:
      amount:
        type: integer
      cashier_id:
        type: integer
      change_amount:
        type: integer
      merchant_id:
        type: integer
      order_id:
        type: integer
      payment_method:
        type: string
      payment_status:
        type: string
    required:
    - amount
    - cashier_id
    - order_id
    - payment_method
    type: object
  requests.CreateUserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - confirm_password
    - email
    - firstname
    - lastname
    - password
    type: object
  requests.RefreshTokenRequest:
    properties:
      refresh_token:
        minLength: 1
        type: string
    required:
    - refresh_token
    type: object
  requests.UpdateCashierRequest:
    properties:
      cashier_id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  requests.UpdateCategoryRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      slug_category:
        type: string
    required:
    - description
    - name
    type: object
  requests.UpdateMerchantRequest:
    properties:
      address:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      description:
        type: string
      merchant_id:
        type: integer
      name:
        type: string
      status:
        type: string
      user_id:
        type: integer
    required:
    - address
    - contact_email
    - contact_phone
    - description
    - name
    - status
    - user_id
    type: object
  requests.UpdateOrderItemRequest:
    properties:
      order_item_id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - order_item_id
    - product_id
    - quantity
    type: object
  requests.UpdateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/requests.UpdateOrderItemRequest'
        type: array
      order_id:
        type: integer
    required:
    - items
    type: object
  requests.UpdateRoleRequest:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  requests.UpdateTransactionRequest:
    properties:
      amount:
        type: integer
      cashier_id:
        type: integer
      change_amount:
        type: integer
      merchant_id:
        type: integer
      order_id:
        type: integer
      payment_method:
        type: string
      payment_status:
        type: string
      transaction_id:
        type: integer
    required:
    - amount
    - cashier_id
    - order_id
    - payment_method
    type: object
  requests.UpdateUserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 6
        type: string
      user_id:
        type: integer
    required:
    - confirm_password
    - email
    - firstname
    - lastname
    - password
    type: object
  response.ApiResponseCashier:
    properties:
      data:
        $ref: '#/definitions/response.CashierResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCashierAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCashierDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCashierDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.CashierResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCashierMonthSales:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CashierResponseMonthSales'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCashierYearSales:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CashierResponseYearSales'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategory:
    properties:
      data:
        $ref: '#/definitions/response.CategoryResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategoryAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategoryDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategoryDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.CategoryResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategoryMonthPrice:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CategoryMonthPriceResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseCategoryYearPrice:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CategoryYearPriceResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseGetMe:
    properties:
      data:
        $ref: '#/definitions/response.UserResponse'
      messsage:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseLogin:
    properties:
      data:
        $ref: '#/definitions/response.TokenResponse'
      messsage:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseMerchant:
    properties:
      data:
        $ref: '#/definitions/response.MerchantResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseMerchantAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseMerchantDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseMerchantDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.MerchantResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrder:
    properties:
      data:
        $ref: '#/definitions/response.OrderResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrderAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrderDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrderDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.OrderResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrderMonthly:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderMonthlyResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseOrderYearly:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderYearlyResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsePaginationCashier:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CashierResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationCashierDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CashierResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationCategory:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CategoryResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationCategoryDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CategoryResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationMerchant:
    properties:
      data:
        items:
          $ref: '#/definitions/response.MerchantResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationMerchantDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.MerchantResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationOrder:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationOrderDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationOrderItem:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderItemResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationOrderItemDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderItemResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationProduct:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ProductResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationProductDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ProductResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationRole:
    properties:
      data:
        items:
          $ref: '#/definitions/response.RoleResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationRoleDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.RoleResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationTransaction:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationTransactionDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationUser:
    properties:
      data:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponsePaginationUserDeleteAt:
    properties:
      data:
        items:
          $ref: '#/definitions/response.UserResponseDeleteAt'
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      status:
        type: string
    type: object
  response.ApiResponseProduct:
    properties:
      data:
        $ref: '#/definitions/response.ProductResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseProductAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseProductDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseProductDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.ProductResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseRefreshToken:
    properties:
      data:
        $ref: '#/definitions/response.TokenResponse'
      messsage:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseRegister:
    properties:
      data:
        $ref: '#/definitions/response.UserResponse'
      messsage:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseRole:
    properties:
      data:
        $ref: '#/definitions/response.RoleResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseRoleAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseTransaction:
    properties:
      data:
        $ref: '#/definitions/response.TransactionResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseTransactionAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseTransactionDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseTransactionDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.TransactionResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseUser:
    properties:
      data:
        $ref: '#/definitions/response.UserResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseUserAll:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseUserDelete:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponseUserDeleteAt:
    properties:
      data:
        $ref: '#/definitions/response.UserResponseDeleteAt'
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesOrderItem:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OrderItemResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionMonthFailed:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionMonthlyAmountFailedResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionMonthMethod:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionMonthlyMethodResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionMonthSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionMonthlyAmountSuccessResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionYearFailed:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionYearlyAmountFailedResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionYearMethod:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionYearlyMethodResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ApiResponsesTransactionYearSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TransactionYearlyAmountSuccessResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.CashierResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.CashierResponseDeleteAt:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.CashierResponseMonthSales:
    properties:
      cashier_id:
        type: integer
      cashier_name:
        type: string
      month:
        type: string
      order_count:
        type: integer
      total_sales:
        type: integer
    type: object
  response.CashierResponseYearSales:
    properties:
      cashier_id:
        type: integer
      cashier_name:
        type: string
      order_count:
        type: integer
      total_sales:
        type: integer
      year:
        type: string
    type: object
  response.CategoryMonthPriceResponse:
    properties:
      category_id:
        type: integer
      category_name:
        type: string
      items_sold:
        type: integer
      month:
        type: string
      order_count:
        type: integer
      total_revenue:
        type: integer
    type: object
  response.CategoryResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_category:
        type: string
      name:
        type: string
      slug_category:
        type: string
      updated_at:
        type: string
    type: object
  response.CategoryResponseDeleteAt:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_category:
        type: string
      name:
        type: string
      slug_category:
        type: string
      updated_at:
        type: string
    type: object
  response.CategoryYearPriceResponse:
    properties:
      category_id:
        type: integer
      category_name:
        type: string
      items_sold:
        type: integer
      order_count:
        type: integer
      total_revenue:
        type: integer
      unique_products_sold:
        type: integer
      year:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  response.MerchantResponse:
    properties:
      address:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.MerchantResponseDeleteAt:
    properties:
      address:
        type: string
      contact_email:
        type: string
      contact_phone:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.OrderItemResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  response.OrderItemResponseDeleteAt:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  response.OrderMonthlyResponse:
    properties:
      month:
        type: string
      order_count:
        type: integer
      total_items_sold:
        type: integer
      total_revenue:
        type: integer
    type: object
  response.OrderResponse:
    properties:
      cashier_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      total_price:
        type: integer
      updated_at:
        type: string
    type: object
  response.OrderResponseDeleteAt:
    properties:
      cashier_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      total_price:
        type: integer
      updated_at:
        type: string
    type: object
  response.OrderYearlyResponse:
    properties:
      active_cashiers:
        type: integer
      order_count:
        type: integer
      total_items_sold:
        type: integer
      total_revenue:
        type: integer
      unique_products_sold:
        type: integer
      year:
        type: string
    type: object
  response.PaginationMeta:
    properties:
      current_page:
        type: integer
      page_size:
        type: integer
      total_pages:
        type: integer
      total_records:
        type: integer
    type: object
  response.ProductResponse:
    properties:
      barcode:
        type: string
      brand:
        type: string
      category_id:
        type: integer
      count_in_stock:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_product:
        type: string
      merchant_id:
        type: integer
      name:
        type: string
      price:
        type: integer
      slug_product:
        type: string
      updated_at:
        type: string
      weight:
        type: integer
    type: object
  response.ProductResponseDeleteAt:
    properties:
      barcode:
        type: string
      brand:
        type: string
      category_id:
        type: integer
      count_in_stock:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_product:
        type: string
      merchant_id:
        type: integer
      name:
        type: string
      price:
        type: integer
      slug_product:
        type: string
      updated_at:
        type: string
      weight:
        type: integer
    type: object
  response.RoleResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.RoleResponseDeleteAt:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.TransactionMonthlyAmountFailedResponse:
    properties:
      month:
        type: string
      total_amount:
        type: integer
      total_failed:
        type: integer
      year:
        type: string
    type: object
  response.TransactionMonthlyAmountSuccessResponse:
    properties:
      month:
        type: string
      total_amount:
        type: integer
      total_success:
        type: integer
      year:
        type: string
    type: object
  response.TransactionMonthlyMethodResponse:
    properties:
      month:
        type: string
      payment_method:
        type: string
      total_amount:
        type: integer
      total_transactions:
        type: integer
    type: object
  response.TransactionResponse:
    properties:
      amount:
        type: integer
      change_amount:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      order_id:
        type: integer
      payment_method:
        type: string
      payment_status:
        type: string
      updated_at:
        type: string
    type: object
  response.TransactionResponseDeleteAt:
    properties:
      amount:
        type: integer
      change_amount:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      merchant_id:
        type: integer
      order_id:
        type: integer
      payment_method:
        type: string
      payment_status:
        type: string
      updated_at:
        type: string
    type: object
  response.TransactionYearlyAmountFailedResponse:
    properties:
      total_amount:
        type: integer
      total_failed:
        type: integer
      year:
        type: string
    type: object
  response.TransactionYearlyAmountSuccessResponse:
    properties:
      total_amount:
        type: integer
      total_success:
        type: integer
      year:
        type: string
    type: object
  response.TransactionYearlyMethodResponse:
    properties:
      payment_method:
        type: string
      total_amount:
        type: integer
      total_transactions:
        type: integer
      year:
        type: string
    type: object
  response.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      updated_at:
        type: string
    type: object
  response.UserResponseDeleteAt:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/hello:
    get:
      description: Returns a simple "Hello" message for testing purposes.
      produces:
      - application/json
      responses:
        "200":
          description: Hello
          schema:
            type: string
      summary: Returns a "Hello" message
      tags:
      - Auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using the provided email and password.
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.ApiResponseLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate a user
      tags:
      - Auth
  /api/auth/me:
    get:
      description: Retrieves the current user's information using a valid access token
        from the Authorization header.
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.ApiResponseGetMe'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      - BearerToken: []
      summary: Get current user information
      tags:
      - Auth
  /api/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.ApiResponseRefreshToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Refresh access token
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details.
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.ApiResponseRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /api/cashier:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all cashiers
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of cashiers
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCashier'
        "500":
          description: Failed to retrieve cashier data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all cashiers
      tags:
      - Cashier
  /api/cashier/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a cashier by ID
      parameters:
      - description: cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: cashier data
          schema:
            $ref: '#/definitions/response.ApiResponseCashier'
        "400":
          description: Invalid cashier ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve cashier data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find cashier by ID
      tags:
      - Cashier
  /api/cashier/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active cashier
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active cashier
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCashierDeleteAt'
        "500":
          description: Failed to retrieve cashier data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active cashier
      tags:
      - Cashier
  /api/cashier/create:
    post:
      consumes:
      - application/json
      description: Create a new cashier with the provided details
      parameters:
      - description: Create cashier request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCashierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashier'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create cashier
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new cashier
      tags:
      - Cashier
  /api/cashier/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a cashier record by its ID.
      parameters:
      - description: cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted cashier record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseCashierDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete cashier:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a cashier
      tags:
      - Cashier
  /api/cashier/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete a cashier record by its ID.
      parameters:
      - description: cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted cashier record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseCashierAll'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete cashier:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a cashier
      tags:
      - Cashier
  /api/cashier/merchant/monthly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashiers statistics for a specific merchant
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly sales by merchant
      tags:
      - Cashier
  /api/cashier/merchant/monthly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashiers statistics for a given year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales data
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly cashiers statistics
      tags:
      - Cashier
  /api/cashier/merchant/yearly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve yearly cashier statistics for a specific merchant
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved yearly sales by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly sales by merchant
      tags:
      - Cashier
  /api/cashier/merchant/yearly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve the yearly cashiers for a specific year.
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly cashiers
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve yearly cashiers
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly cashiers
      tags:
      - Cashier
  /api/cashier/monthly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashiers statistics for a given year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales data
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly cashiers statistics
      tags:
      - Cashier
  /api/cashier/monthly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashiers statistics for a given year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales data
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly cashiers statistics
      tags:
      - Cashier
  /api/cashier/mycashier/monthly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashier statistics for a specific cashier
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Cashier ID
        in: query
        name: cashier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales by cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid cashier ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Cashier not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly sales by cashier
      tags:
      - Cashier
  /api/cashier/mycashier/monthly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve monthly cashiers statistics for a given year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      - description: Cashier id
        in: query
        name: cashier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monthly sales data
          schema:
            $ref: '#/definitions/response.ApiResponseCashierMonthSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly cashiers statistics
      tags:
      - Cashier
  /api/cashier/mycashier/yearly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve yearly cashier statistics for a specific cashier
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Cashier ID
        in: query
        name: cashier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved yearly sales by cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid cashier ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Cashier not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly sales by cashier
      tags:
      - Cashier
  /api/cashier/mycashier/yearly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve the yearly cashiers for a specific year.
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Cashier ID
        in: query
        name: cashier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly cashiers
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve yearly cashiers
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly cashiers
      tags:
      - Cashier
  /api/cashier/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed cashier record by its ID.
      parameters:
      - description: Cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashierDeleteAt'
        "400":
          description: Invalid cashier ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore cashier
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed cashier
      tags:
      - Cashier
  /api/cashier/restore/all:
    post:
      consumes:
      - application/json
      description: Restore a trashed cashier record by its ID.
      parameters:
      - description: Cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored cashier all
          schema:
            $ref: '#/definitions/response.ApiResponseCashierAll'
        "400":
          description: Invalid cashier ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore cashier
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed cashier
      tags:
      - Cashier
  /api/cashier/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed cashier records
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed cashier data
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCashierDeleteAt'
        "500":
          description: Failed to retrieve cashier data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed cashier
      tags:
      - Cashier
  /api/cashier/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed casher record by its ID.
      parameters:
      - description: Cashier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashierDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed cashier
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed casher
      tags:
      - Cashier
  /api/cashier/update/{id}:
    post:
      consumes:
      - application/json
      description: Update an existing cashier record with the provided details
      parameters:
      - description: Cashier ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update cashier request
        in: body
        name: UpdateCashierRequest
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCashierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated cashier
          schema:
            $ref: '#/definitions/response.ApiResponseCashier'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update cashier
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing cashier
      tags:
      - Cashier
  /api/cashier/yearly-sales:
    get:
      consumes:
      - application/json
      description: Retrieve the yearly cashiers for a specific year.
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly cashiers
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve yearly cashiers
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly cashiers
      tags:
      - Cashier
  /api/cashier/yearly-total-sales:
    get:
      consumes:
      - application/json
      description: Retrieve the yearly cashiers for a specific year.
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly cashiers
          schema:
            $ref: '#/definitions/response.ApiResponseCashierYearSales'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve yearly cashiers
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly cashiers
      tags:
      - Cashier
  /api/category:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all category
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of category
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCategory'
        "500":
          description: Failed to retrieve category data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all category
      tags:
      - Category
  /api/category/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/response.ApiResponseCategory'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve category data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find category by ID
      tags:
      - Category
  /api/category/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active category
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active category
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCategoryDeleteAt'
        "500":
          description: Failed to retrieve category data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active category
      tags:
      - Category
  /api/category/create:
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created category
          schema:
            $ref: '#/definitions/response.ApiResponseCategory'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create category
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - Category
  /api/category/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a category record by its ID.
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted category record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete category:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a category
      tags:
      - Category
  /api/category/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete a category record by its ID.
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted category record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryAll'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete category:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a category
      tags:
      - Category
  /api/category/merchant/monthly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for categories by specific
        merchant
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly category pricing by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly category pricing by merchant
      tags:
      - Category
  /api/category/merchant/monthly-total-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly category pricing
      tags:
      - Category
  /api/category/merchant/yearly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve yearly pricing statistics for categories by specific merchant
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly category pricing by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryYearPrice'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly category pricing by merchant
      tags:
      - Category
  /api/category/monthly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly category pricing
      tags:
      - Category
  /api/category/monthly-total-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly category pricing
      tags:
      - Category
  /api/category/mycategory/monthly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for specific category
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly pricing by category
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid category ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly pricing by category ID
      tags:
      - Category
  /api/category/mycategory/monthly-total-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve monthly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryMonthPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly category pricing
      tags:
      - Category
  /api/category/mycategory/yearly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve yearly pricing statistics for specific category
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly pricing by category
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryYearPrice'
        "400":
          description: Invalid category ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly pricing by category ID
      tags:
      - Category
  /api/category/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed category record by its ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored category
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryDeleteAt'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore category
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed category
      tags:
      - Category
  /api/category/restore/all:
    post:
      consumes:
      - application/json
      description: Restore a trashed category record by its ID.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored category all
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryAll'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore category
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed category
      tags:
      - Category
  /api/category/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed category records
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed category data
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationCategoryDeleteAt'
        "500":
          description: Failed to retrieve category data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed category
      tags:
      - Category
  /api/category/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed category record by its ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed category
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed category
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed category
      tags:
      - Category
  /api/category/update:
    post:
      consumes:
      - application/json
      description: Update an existing category record with the provided details
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated category
          schema:
            $ref: '#/definitions/response.ApiResponseCategory'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update category
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing category
      tags:
      - Category
  /api/category/yearly-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve yearly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryYearPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly category pricing
      tags:
      - Category
  /api/category/yearly-total-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve yearly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryYearPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly category pricing
      tags:
      - Category
  /api/merchant:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all merchant
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of merchant
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationMerchant'
        "500":
          description: Failed to retrieve merchant data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all merchant
      tags:
      - Merchant
  /api/merchant/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a merchant by ID
      parameters:
      - description: merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: merchant data
          schema:
            $ref: '#/definitions/response.ApiResponseMerchant'
        "400":
          description: Invalid merchant ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve merchant data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find merchant by ID
      tags:
      - Merchant
  /api/merchant/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active merchant
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active merchant
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationMerchantDeleteAt'
        "500":
          description: Failed to retrieve merchant data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active merchant
      tags:
      - Merchant
  /api/merchant/create:
    post:
      consumes:
      - application/json
      description: Create a new merchant with the provided details
      parameters:
      - description: Create merchant request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created merchant
          schema:
            $ref: '#/definitions/response.ApiResponseMerchant'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create merchant
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new merchant
      tags:
      - Merchant
  /api/merchant/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a merchant record by its ID.
      parameters:
      - description: merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted merchant record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseMerchantDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete merchant:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a merchant
      tags:
      - Merchant
  /api/merchant/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete a merchant record by its ID.
      parameters:
      - description: merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted merchant record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseMerchantAll'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete merchant:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a merchant
      tags:
      - Merchant
  /api/merchant/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed merchant record by its ID.
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored merchant
          schema:
            $ref: '#/definitions/response.ApiResponseMerchantDeleteAt'
        "400":
          description: Invalid merchant ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore merchant
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed merchant
      tags:
      - Merchant
  /api/merchant/restore/all:
    post:
      consumes:
      - application/json
      description: Restore a trashed merchant record by its ID.
      parameters:
      - description: merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored merchant all
          schema:
            $ref: '#/definitions/response.ApiResponseMerchantAll'
        "400":
          description: Invalid merchant ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore merchant
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed merchant
      tags:
      - Merchant
  /api/merchant/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed merchant records
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed merchant data
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationMerchantDeleteAt'
        "500":
          description: Failed to retrieve merchant data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed merchant
      tags:
      - Merchant
  /api/merchant/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed merchant record by its ID.
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed merchant
          schema:
            $ref: '#/definitions/response.ApiResponseMerchantDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed merchant
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed merchant
      tags:
      - Merchant
  /api/merchant/update:
    post:
      consumes:
      - application/json
      description: Update an existing merchant record with the provided details
      parameters:
      - description: Update merchant request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated merchant
          schema:
            $ref: '#/definitions/response.ApiResponseMerchant'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update merchant
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing merchant
      tags:
      - Merchant
  /api/merchant/yearly-total-pricing:
    get:
      consumes:
      - application/json
      description: Retrieve yearly pricing statistics for all categories
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly category pricing data
          schema:
            $ref: '#/definitions/response.ApiResponseCategoryYearPrice'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly category pricing
      tags:
      - Category
  /api/order:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of orders
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrder'
        "500":
          description: Failed to retrieve order data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all orders
      tags:
      - Order
  /api/order-item:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all order items
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of order items
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrderItem'
        "500":
          description: Failed to retrieve order item data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all order items
      tags:
      - Order-Item
  /api/order-item/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active order items
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active order items
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrderItemDeleteAt'
        "500":
          description: Failed to retrieve order item data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active order items
      tags:
      - Order-Item
  /api/order-item/order/{order_id}:
    get:
      consumes:
      - application/json
      description: Retrieve order items by order ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of order items by order ID
          schema:
            $ref: '#/definitions/response.ApiResponsesOrderItem'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve order item data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find order items by order ID
      tags:
      - Order-Item
  /api/order-item/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed order items
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed order items
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrderItemDeleteAt'
        "500":
          description: Failed to retrieve order item data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed order items
      tags:
      - Order-Item
  /api/order/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order data
          schema:
            $ref: '#/definitions/response.ApiResponseOrder'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve order data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find order by ID
      tags:
      - Order
  /api/order/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active orders
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrderDeleteAt'
        "500":
          description: Failed to retrieve order data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active orders
      tags:
      - Order
  /api/order/create:
    post:
      consumes:
      - application/json
      description: Create a new order with provided details
      parameters:
      - description: Order details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created order
          schema:
            $ref: '#/definitions/response.ApiResponseOrder'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new order
      tags:
      - Order
  /api/order/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete an order record by its ID.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted order record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseOrderDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete order:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete an order
      tags:
      - Order
  /api/order/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete all order records.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted all orders permanently
          schema:
            $ref: '#/definitions/response.ApiResponseOrderAll'
        "500":
          description: Failed to delete orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete all orders
      tags:
      - Order
  /api/order/merchant/monthly-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve monthly revenue statistics for specific merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly revenue by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseOrderMonthly'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly revenue by merchant
      tags:
      - Order
  /api/order/merchant/monthly-total-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve monthly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderMonthly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly revenue report
      tags:
      - Order
  /api/order/merchant/yearly-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve yearly revenue statistics for specific merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly revenue by merchant
          schema:
            $ref: '#/definitions/response.ApiResponseOrderYearly'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly revenue by merchant
      tags:
      - Order
  /api/order/merchant/yearly-total-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve yearly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderYearly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly revenue report
      tags:
      - Order
  /api/order/monthly-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve monthly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderMonthly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly revenue report
      tags:
      - Order
  /api/order/monthly-total-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve monthly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Monthly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderMonthly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly revenue report
      tags:
      - Order
  /api/order/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed order record by its ID.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored order
          schema:
            $ref: '#/definitions/response.ApiResponseOrderDeleteAt'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed order
      tags:
      - Order
  /api/order/restore/all:
    post:
      consumes:
      - application/json
      description: Restore all trashed order records.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored all orders
          schema:
            $ref: '#/definitions/response.ApiResponseOrderAll'
        "500":
          description: Failed to restore orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore all trashed orders
      tags:
      - Order
  /api/order/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed orders
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationOrderDeleteAt'
        "500":
          description: Failed to retrieve order data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed orders
      tags:
      - Order
  /api/order/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed order record by its ID.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed order
          schema:
            $ref: '#/definitions/response.ApiResponseOrderDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed order
      tags:
      - Order
  /api/order/update:
    put:
      consumes:
      - application/json
      description: Update an existing order with provided details
      parameters:
      - description: Order update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated order
          schema:
            $ref: '#/definitions/response.ApiResponseOrder'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing order
      tags:
      - Order
  /api/order/yearly-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve yearly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderYearly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly revenue report
      tags:
      - Order
  /api/order/yearly-total-revenue:
    get:
      consumes:
      - application/json
      description: Retrieve yearly revenue statistics for all orders
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Yearly revenue data
          schema:
            $ref: '#/definitions/response.ApiResponseOrderYearly'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly revenue report
      tags:
      - Order
  /api/product:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationProduct'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all products
      tags:
      - Product
  /api/product/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product data
          schema:
            $ref: '#/definitions/response.ApiResponseProduct'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find product by ID
      tags:
      - Product
  /api/product/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active products
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationProductDeleteAt'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active products
      tags:
      - Product
  /api/product/category:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products filtered by category
      parameters:
      - description: Category Name
        in: query
        name: category_name
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationProduct'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find products by category
      tags:
      - Product
  /api/product/create:
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with the provided details and an image file
      parameters:
      - description: Merchant ID
        in: formData
        name: merchant_id
        required: true
        type: string
      - description: Category ID
        in: formData
        name: category_id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: string
      - description: Product count in stock
        in: formData
        name: count_in_stock
        required: true
        type: string
      - description: Product brand
        in: formData
        name: brand
        required: true
        type: string
      - description: Product weight
        in: formData
        name: weight
        required: true
        type: string
      - description: Product rating
        in: formData
        name: rating
        required: true
        type: string
      - description: Product slug
        in: formData
        name: slug_product
        required: true
        type: string
      - description: Product image file
        in: formData
        name: image_product
        required: true
        type: file
      - description: Product barcode
        in: formData
        name: barcode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created product
          schema:
            $ref: '#/definitions/response.ApiResponseProduct'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create product
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new product
      tags:
      - Product
  /api/product/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a product record by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted product record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseProductDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete product:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a product
      tags:
      - Product
  /api/product/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete all product records.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted all product records permanently
          schema:
            $ref: '#/definitions/response.ApiResponseProductAll'
        "500":
          description: Failed to delete all products
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete all products
      tags:
      - Product
  /api/product/merchant/{merchant_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products filtered by merchant
      parameters:
      - description: Merchant ID
        in: path
        name: merchant_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      - description: Category ID filter
        in: query
        name: category_id
        type: integer
      - description: Minimum price filter
        in: query
        name: min_price
        type: integer
      - description: Maximum price filter
        in: query
        name: max_price
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationProduct'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find products by merchant
      tags:
      - Product
  /api/product/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed product record by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored product
          schema:
            $ref: '#/definitions/response.ApiResponseProductDeleteAt'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore product
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed product
      tags:
      - Product
  /api/product/restore/all:
    post:
      consumes:
      - application/json
      description: Restore all trashed product records.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored all products
          schema:
            $ref: '#/definitions/response.ApiResponseProductAll'
        "500":
          description: Failed to restore all products
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore all trashed products
      tags:
      - Product
  /api/product/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed products
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationProductDeleteAt'
        "500":
          description: Failed to retrieve product data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed products
      tags:
      - Product
  /api/product/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed product record by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed product
          schema:
            $ref: '#/definitions/response.ApiResponseProductDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed product
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed product
      tags:
      - Product
  /api/product/update:
    post:
      consumes:
      - multipart/form-data
      description: Update an existing product record with the provided details and
        an optional image file
      parameters:
      - description: Product ID
        in: formData
        name: product_id
        required: true
        type: string
      - description: Merchant ID
        in: formData
        name: merchant_id
        required: true
        type: string
      - description: Category ID
        in: formData
        name: category_id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: string
      - description: Product count in stock
        in: formData
        name: count_in_stock
        required: true
        type: string
      - description: Product brand
        in: formData
        name: brand
        required: true
        type: string
      - description: Product weight
        in: formData
        name: weight
        required: true
        type: string
      - description: Product rating
        in: formData
        name: rating
        required: true
        type: string
      - description: Product slug
        in: formData
        name: slug_product
        required: true
        type: string
      - description: New product image file
        in: formData
        name: image_product
        type: file
      - description: Product barcode
        in: formData
        name: barcode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated product
          schema:
            $ref: '#/definitions/response.ApiResponseProduct'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update product
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing product
      tags:
      - Product
  /api/role:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of roles with optional search and pagination
        parameters.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: Search keyword
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationRole'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to fetch roles
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role with the provided details.
      parameters:
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create role
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - Role
  /api/role/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to fetch role
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a role by ID
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Soft-delete a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Soft-deleted role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to soft-delete role
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Soft-delete a role
      tags:
      - Role
  /api/role/active:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of active roles with optional search
        and pagination parameters.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: Search keyword
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active roles
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationRoleDeleteAt'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to fetch active roles
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get active roles
      tags:
      - Role
  /api/role/permanent-all:
    delete:
      consumes:
      - application/json
      description: Permanently delete all roles.
      produces:
      - application/json
      responses:
        "200":
          description: Permanently deleted roles data
          schema:
            $ref: '#/definitions/response.ApiResponseRoleAll'
        "500":
          description: Failed to delete all roles permanently
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete all roles
      tags:
      - Role
  /api/role/permanent/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permanently deleted role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to delete role permanently
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a role
      tags:
      - Role
  /api/role/restore-all:
    put:
      consumes:
      - application/json
      description: Restore all soft-deleted roles.
      produces:
      - application/json
      responses:
        "200":
          description: Restored roles data
          schema:
            $ref: '#/definitions/response.ApiResponseRoleAll'
        "500":
          description: Failed to restore all roles
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore all soft-deleted roles
      tags:
      - Role
  /api/role/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a soft-deleted role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Restored role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore role
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a soft-deleted role
      tags:
      - Role
  /api/role/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of trashed roles with optional search
        and pagination parameters.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: Search keyword
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed roles
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationRoleDeleteAt'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to fetch trashed roles
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get trashed roles
      tags:
      - Role
  /api/role/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a role by the associated user ID.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role data
          schema:
            $ref: '#/definitions/response.ApiResponseRole'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to fetch role by user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get role by user ID
      tags:
      - Role
  /api/transaction:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all transactions filtered by merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of transactions
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationTransaction'
        "400":
          description: Invalid merchant ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve transaction data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all transactions by merchant
      tags:
      - Transaction
  /api/transaction/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transaction data
          schema:
            $ref: '#/definitions/response.ApiResponseTransaction'
        "400":
          description: Invalid transaction ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve transaction data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find transaction by ID
      tags:
      - Transaction
  /api/transaction/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active transactions
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active transactions
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationTransactionDeleteAt'
        "500":
          description: Failed to retrieve transaction data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active transactions
      tags:
      - Transaction
  /api/transaction/create:
    post:
      consumes:
      - application/json
      description: Create a new transaction record
      parameters:
      - description: Transaction details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created transaction
          schema:
            $ref: '#/definitions/response.ApiResponseTransaction'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create transaction
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new transaction
      tags:
      - Transaction
  /api/transaction/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a transaction record by its ID.
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted transaction record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseTransactionDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to delete transaction
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a transaction
      tags:
      - Transaction
  /api/transaction/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete all transactions.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted all transactions permanently
          schema:
            $ref: '#/definitions/response.ApiResponseTransactionAll'
        "500":
          description: Failed to delete transactions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete all transactions
      tags:
      - Transaction
  /api/transaction/merchant/monthly-failed:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of failed transactions by month for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month in MM format (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthFailed'
        "400":
          description: Invalid merchant ID, year or month parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly failed transactions by merchant
      tags:
      - Transaction
  /api/transaction/merchant/monthly-methods:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of payment methods used by month for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthMethod'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly payment method distribution by merchant
      tags:
      - Transaction
  /api/transaction/merchant/monthly-success:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of successful transactions by month for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month in MM format (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthSuccess'
        "400":
          description: Invalid merchant ID, year or month parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly successful transactions by merchant
      tags:
      - Transaction
  /api/transaction/merchant/yearly-failed:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of failed transactions by year for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearFailed'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly failed transactions by merchant
      tags:
      - Transaction
  /api/transaction/merchant/yearly-methods:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of payment methods used by year for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearMethod'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly payment method distribution by merchant
      tags:
      - Transaction
  /api/transaction/merchant/yearly-success:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of successful transactions by year for specific
        merchant
      parameters:
      - description: Merchant ID
        in: query
        name: merchant_id
        required: true
        type: integer
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearSuccess'
        "400":
          description: Invalid merchant ID or year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly successful transactions by merchant
      tags:
      - Transaction
  /api/transaction/monthly-failed:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of failed transactions by month
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month in MM format (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthFailed'
        "400":
          description: Invalid year or month parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly failed transactions
      tags:
      - Transaction
  /api/transaction/monthly-methods:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of payment methods used by month
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthMethod'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly payment method distribution
      tags:
      - Transaction
  /api/transaction/monthly-success:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of successful transactions by month
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      - description: Month in MM format (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionMonthSuccess'
        "400":
          description: Invalid year or month parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get monthly successful transactions
      tags:
      - Transaction
  /api/transaction/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed transaction record by its ID.
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored transaction
          schema:
            $ref: '#/definitions/response.ApiResponseTransactionDeleteAt'
        "400":
          description: Invalid transaction ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore transaction
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed transaction
      tags:
      - Transaction
  /api/transaction/restore/all:
    post:
      consumes:
      - application/json
      description: Restore all trashed transactions.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored all transactions
          schema:
            $ref: '#/definitions/response.ApiResponseTransactionAll'
        "500":
          description: Failed to restore transactions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore all trashed transactions
      tags:
      - Transaction
  /api/transaction/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed transaction records
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed transaction data
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationTransactionDeleteAt'
        "500":
          description: Failed to retrieve transaction data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed transactions
      tags:
      - Transaction
  /api/transaction/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed transaction record by its ID.
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed transaction
          schema:
            $ref: '#/definitions/response.ApiResponseTransactionDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed transaction
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed transaction
      tags:
      - Transaction
  /api/transaction/update:
    post:
      consumes:
      - application/json
      description: Update an existing transaction record
      parameters:
      - description: Updated transaction details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated transaction
          schema:
            $ref: '#/definitions/response.ApiResponseTransaction'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update transaction
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing transaction
      tags:
      - Transaction
  /api/transaction/yearly-failed:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of failed transactions by year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearFailed'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly failed transactions
      tags:
      - Transaction
  /api/transaction/yearly-methods:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of payment methods used by year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearMethod'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly payment method distribution
      tags:
      - Transaction
  /api/transaction/yearly-success:
    get:
      consumes:
      - application/json
      description: Retrieve statistics of successful transactions by year
      parameters:
      - description: Year in YYYY format (e.g., 2023)
        in: query
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ApiResponsesTransactionYearSuccess'
        "400":
          description: Invalid year parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get yearly successful transactions
      tags:
      - Transaction
  /api/user:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationUser'
        "500":
          description: Failed to retrieve user data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find all users
      tags:
      - User
  /api/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/response.ApiResponseUser'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve user data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Find user by ID
      tags:
      - User
  /api/user/active:
    get:
      consumes:
      - application/json
      description: Retrieve a list of active users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active users
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationUserDeleteAt'
        "500":
          description: Failed to retrieve user data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve active users
      tags:
      - User
  /api/user/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created user
          schema:
            $ref: '#/definitions/response.ApiResponseUser'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new user
      tags:
      - User
  /api/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a user record by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseUserDelete'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete user:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a user
      tags:
      - User
  /api/user/delete/all:
    post:
      consumes:
      - application/json
      description: Permanently delete a user record by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user record permanently
          schema:
            $ref: '#/definitions/response.ApiResponseUserAll'
        "400":
          description: 'Bad Request: Invalid ID'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'Failed to delete user:'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Permanently delete a user
      tags:
      - User
  /api/user/restore/{id}:
    post:
      consumes:
      - application/json
      description: Restore a trashed user record by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored user
          schema:
            $ref: '#/definitions/response.ApiResponseUserDeleteAt'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed user
      tags:
      - User
  /api/user/restore/all:
    post:
      consumes:
      - application/json
      description: Restore a trashed user record by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored user all
          schema:
            $ref: '#/definitions/response.ApiResponseUserAll'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to restore user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Restore a trashed user
      tags:
      - User
  /api/user/trashed:
    get:
      consumes:
      - application/json
      description: Retrieve a list of trashed user records
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trashed user data
          schema:
            $ref: '#/definitions/response.ApiResponsePaginationUserDeleteAt'
        "500":
          description: Failed to retrieve user data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve trashed users
      tags:
      - User
  /api/user/trashed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a trashed user record by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved trashed user
          schema:
            $ref: '#/definitions/response.ApiResponseUserDeleteAt'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve trashed user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Retrieve a trashed user
      tags:
      - User
  /api/user/update/{id}:
    post:
      consumes:
      - application/json
      description: Update an existing user record with the provided details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user request
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/response.ApiResponseUser'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing user
      tags:
      - User
swagger: "2.0"
