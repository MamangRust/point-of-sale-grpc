// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_FindAll_FullMethodName                   = "/pb.ProductService/FindAll"
	ProductService_FindByMerchant_FullMethodName            = "/pb.ProductService/FindByMerchant"
	ProductService_FindByCategory_FullMethodName            = "/pb.ProductService/FindByCategory"
	ProductService_FindById_FullMethodName                  = "/pb.ProductService/FindById"
	ProductService_FindByActive_FullMethodName              = "/pb.ProductService/FindByActive"
	ProductService_FindByTrashed_FullMethodName             = "/pb.ProductService/FindByTrashed"
	ProductService_Create_FullMethodName                    = "/pb.ProductService/Create"
	ProductService_Update_FullMethodName                    = "/pb.ProductService/Update"
	ProductService_TrashedProduct_FullMethodName            = "/pb.ProductService/TrashedProduct"
	ProductService_RestoreProduct_FullMethodName            = "/pb.ProductService/RestoreProduct"
	ProductService_DeleteProductPermanent_FullMethodName    = "/pb.ProductService/DeleteProductPermanent"
	ProductService_RestoreAllProduct_FullMethodName         = "/pb.ProductService/RestoreAllProduct"
	ProductService_DeleteAllProductPermanent_FullMethodName = "/pb.ProductService/DeleteAllProductPermanent"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	FindAll(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error)
	FindByMerchant(ctx context.Context, in *FindAllProductMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error)
	FindByCategory(ctx context.Context, in *FindAllProductCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error)
	FindById(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error)
	FindByActive(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProductDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProductDeleteAt, error)
	Create(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error)
	Update(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error)
	TrashedProduct(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDeleteAt, error)
	RestoreProduct(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDeleteAt, error)
	DeleteProductPermanent(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDelete, error)
	RestoreAllProduct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseProductAll, error)
	DeleteAllProductPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseProductAll, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) FindAll(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationProduct)
	err := c.cc.Invoke(ctx, ProductService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindByMerchant(ctx context.Context, in *FindAllProductMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationProduct)
	err := c.cc.Invoke(ctx, ProductService_FindByMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindByCategory(ctx context.Context, in *FindAllProductCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationProduct)
	err := c.cc.Invoke(ctx, ProductService_FindByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindById(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProduct)
	err := c.cc.Invoke(ctx, ProductService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindByActive(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProductDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationProductDeleteAt)
	err := c.cc.Invoke(ctx, ProductService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindByTrashed(ctx context.Context, in *FindAllProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationProductDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationProductDeleteAt)
	err := c.cc.Invoke(ctx, ProductService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Create(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProduct)
	err := c.cc.Invoke(ctx, ProductService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Update(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ApiResponseProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProduct)
	err := c.cc.Invoke(ctx, ProductService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) TrashedProduct(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProductDeleteAt)
	err := c.cc.Invoke(ctx, ProductService_TrashedProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreProduct(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProductDeleteAt)
	err := c.cc.Invoke(ctx, ProductService_RestoreProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProductPermanent(ctx context.Context, in *FindByIdProductRequest, opts ...grpc.CallOption) (*ApiResponseProductDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProductDelete)
	err := c.cc.Invoke(ctx, ProductService_DeleteProductPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) RestoreAllProduct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseProductAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProductAll)
	err := c.cc.Invoke(ctx, ProductService_RestoreAllProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAllProductPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseProductAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseProductAll)
	err := c.cc.Invoke(ctx, ProductService_DeleteAllProductPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	FindAll(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProduct, error)
	FindByMerchant(context.Context, *FindAllProductMerchantRequest) (*ApiResponsePaginationProduct, error)
	FindByCategory(context.Context, *FindAllProductCategoryRequest) (*ApiResponsePaginationProduct, error)
	FindById(context.Context, *FindByIdProductRequest) (*ApiResponseProduct, error)
	FindByActive(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProductDeleteAt, error)
	FindByTrashed(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProductDeleteAt, error)
	Create(context.Context, *CreateProductRequest) (*ApiResponseProduct, error)
	Update(context.Context, *UpdateProductRequest) (*ApiResponseProduct, error)
	TrashedProduct(context.Context, *FindByIdProductRequest) (*ApiResponseProductDeleteAt, error)
	RestoreProduct(context.Context, *FindByIdProductRequest) (*ApiResponseProductDeleteAt, error)
	DeleteProductPermanent(context.Context, *FindByIdProductRequest) (*ApiResponseProductDelete, error)
	RestoreAllProduct(context.Context, *emptypb.Empty) (*ApiResponseProductAll, error)
	DeleteAllProductPermanent(context.Context, *emptypb.Empty) (*ApiResponseProductAll, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) FindAll(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedProductServiceServer) FindByMerchant(context.Context, *FindAllProductMerchantRequest) (*ApiResponsePaginationProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMerchant not implemented")
}
func (UnimplementedProductServiceServer) FindByCategory(context.Context, *FindAllProductCategoryRequest) (*ApiResponsePaginationProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCategory not implemented")
}
func (UnimplementedProductServiceServer) FindById(context.Context, *FindByIdProductRequest) (*ApiResponseProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedProductServiceServer) FindByActive(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProductDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedProductServiceServer) FindByTrashed(context.Context, *FindAllProductRequest) (*ApiResponsePaginationProductDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedProductServiceServer) Create(context.Context, *CreateProductRequest) (*ApiResponseProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductServiceServer) Update(context.Context, *UpdateProductRequest) (*ApiResponseProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductServiceServer) TrashedProduct(context.Context, *FindByIdProductRequest) (*ApiResponseProductDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedProduct not implemented")
}
func (UnimplementedProductServiceServer) RestoreProduct(context.Context, *FindByIdProductRequest) (*ApiResponseProductDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProductPermanent(context.Context, *FindByIdProductRequest) (*ApiResponseProductDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductPermanent not implemented")
}
func (UnimplementedProductServiceServer) RestoreAllProduct(context.Context, *emptypb.Empty) (*ApiResponseProductAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteAllProductPermanent(context.Context, *emptypb.Empty) (*ApiResponseProductAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllProductPermanent not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindAll(ctx, req.(*FindAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProductMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindByMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindByMerchant(ctx, req.(*FindAllProductMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindByCategory(ctx, req.(*FindAllProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindById(ctx, req.(*FindByIdProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindByActive(ctx, req.(*FindAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindByTrashed(ctx, req.(*FindAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Create(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Update(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_TrashedProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).TrashedProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_TrashedProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).TrashedProduct(ctx, req.(*FindByIdProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreProduct(ctx, req.(*FindByIdProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProductPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProductPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProductPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProductPermanent(ctx, req.(*FindByIdProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_RestoreAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).RestoreAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_RestoreAllProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).RestoreAllProduct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAllProductPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAllProductPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAllProductPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAllProductPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _ProductService_FindAll_Handler,
		},
		{
			MethodName: "FindByMerchant",
			Handler:    _ProductService_FindByMerchant_Handler,
		},
		{
			MethodName: "FindByCategory",
			Handler:    _ProductService_FindByCategory_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ProductService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _ProductService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _ProductService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProductService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductService_Update_Handler,
		},
		{
			MethodName: "TrashedProduct",
			Handler:    _ProductService_TrashedProduct_Handler,
		},
		{
			MethodName: "RestoreProduct",
			Handler:    _ProductService_RestoreProduct_Handler,
		},
		{
			MethodName: "DeleteProductPermanent",
			Handler:    _ProductService_DeleteProductPermanent_Handler,
		},
		{
			MethodName: "RestoreAllProduct",
			Handler:    _ProductService_RestoreAllProduct_Handler,
		},
		{
			MethodName: "DeleteAllProductPermanent",
			Handler:    _ProductService_DeleteAllProductPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
