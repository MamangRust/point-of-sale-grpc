// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: cashier.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CashierService_FindAll_FullMethodName                   = "/pb.CashierService/FindAll"
	CashierService_FindById_FullMethodName                  = "/pb.CashierService/FindById"
	CashierService_FindByActive_FullMethodName              = "/pb.CashierService/FindByActive"
	CashierService_FindByTrashed_FullMethodName             = "/pb.CashierService/FindByTrashed"
	CashierService_FindByMerchant_FullMethodName            = "/pb.CashierService/FindByMerchant"
	CashierService_CreateCashier_FullMethodName             = "/pb.CashierService/CreateCashier"
	CashierService_UpdateCashier_FullMethodName             = "/pb.CashierService/UpdateCashier"
	CashierService_TrashedCashier_FullMethodName            = "/pb.CashierService/TrashedCashier"
	CashierService_RestoreCashier_FullMethodName            = "/pb.CashierService/RestoreCashier"
	CashierService_DeleteCashierPermanent_FullMethodName    = "/pb.CashierService/DeleteCashierPermanent"
	CashierService_RestoreAllCashier_FullMethodName         = "/pb.CashierService/RestoreAllCashier"
	CashierService_DeleteAllCashierPermanent_FullMethodName = "/pb.CashierService/DeleteAllCashierPermanent"
)

// CashierServiceClient is the client API for CashierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashierServiceClient interface {
	FindAll(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashier, error)
	FindById(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error)
	FindByActive(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashierDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashierDeleteAt, error)
	FindByMerchant(ctx context.Context, in *FindByMerchantCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashier, error)
	CreateCashier(ctx context.Context, in *CreateCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error)
	UpdateCashier(ctx context.Context, in *UpdateCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error)
	TrashedCashier(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDeleteAt, error)
	RestoreCashier(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDeleteAt, error)
	DeleteCashierPermanent(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDelete, error)
	RestoreAllCashier(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCashierAll, error)
	DeleteAllCashierPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCashierAll, error)
}

type cashierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashierServiceClient(cc grpc.ClientConnInterface) CashierServiceClient {
	return &cashierServiceClient{cc}
}

func (c *cashierServiceClient) FindAll(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCashier)
	err := c.cc.Invoke(ctx, CashierService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) FindById(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashier)
	err := c.cc.Invoke(ctx, CashierService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) FindByActive(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashierDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCashierDeleteAt)
	err := c.cc.Invoke(ctx, CashierService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) FindByTrashed(ctx context.Context, in *FindAllCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashierDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCashierDeleteAt)
	err := c.cc.Invoke(ctx, CashierService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) FindByMerchant(ctx context.Context, in *FindByMerchantCashierRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCashier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCashier)
	err := c.cc.Invoke(ctx, CashierService_FindByMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) CreateCashier(ctx context.Context, in *CreateCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashier)
	err := c.cc.Invoke(ctx, CashierService_CreateCashier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) UpdateCashier(ctx context.Context, in *UpdateCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashier)
	err := c.cc.Invoke(ctx, CashierService_UpdateCashier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) TrashedCashier(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashierDeleteAt)
	err := c.cc.Invoke(ctx, CashierService_TrashedCashier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) RestoreCashier(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashierDeleteAt)
	err := c.cc.Invoke(ctx, CashierService_RestoreCashier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) DeleteCashierPermanent(ctx context.Context, in *FindByIdCashierRequest, opts ...grpc.CallOption) (*ApiResponseCashierDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashierDelete)
	err := c.cc.Invoke(ctx, CashierService_DeleteCashierPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) RestoreAllCashier(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCashierAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashierAll)
	err := c.cc.Invoke(ctx, CashierService_RestoreAllCashier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierServiceClient) DeleteAllCashierPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCashierAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCashierAll)
	err := c.cc.Invoke(ctx, CashierService_DeleteAllCashierPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CashierServiceServer is the server API for CashierService service.
// All implementations must embed UnimplementedCashierServiceServer
// for forward compatibility.
type CashierServiceServer interface {
	FindAll(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashier, error)
	FindById(context.Context, *FindByIdCashierRequest) (*ApiResponseCashier, error)
	FindByActive(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashierDeleteAt, error)
	FindByTrashed(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashierDeleteAt, error)
	FindByMerchant(context.Context, *FindByMerchantCashierRequest) (*ApiResponsePaginationCashier, error)
	CreateCashier(context.Context, *CreateCashierRequest) (*ApiResponseCashier, error)
	UpdateCashier(context.Context, *UpdateCashierRequest) (*ApiResponseCashier, error)
	TrashedCashier(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDeleteAt, error)
	RestoreCashier(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDeleteAt, error)
	DeleteCashierPermanent(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDelete, error)
	RestoreAllCashier(context.Context, *emptypb.Empty) (*ApiResponseCashierAll, error)
	DeleteAllCashierPermanent(context.Context, *emptypb.Empty) (*ApiResponseCashierAll, error)
	mustEmbedUnimplementedCashierServiceServer()
}

// UnimplementedCashierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCashierServiceServer struct{}

func (UnimplementedCashierServiceServer) FindAll(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedCashierServiceServer) FindById(context.Context, *FindByIdCashierRequest) (*ApiResponseCashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedCashierServiceServer) FindByActive(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashierDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedCashierServiceServer) FindByTrashed(context.Context, *FindAllCashierRequest) (*ApiResponsePaginationCashierDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedCashierServiceServer) FindByMerchant(context.Context, *FindByMerchantCashierRequest) (*ApiResponsePaginationCashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMerchant not implemented")
}
func (UnimplementedCashierServiceServer) CreateCashier(context.Context, *CreateCashierRequest) (*ApiResponseCashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashier not implemented")
}
func (UnimplementedCashierServiceServer) UpdateCashier(context.Context, *UpdateCashierRequest) (*ApiResponseCashier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCashier not implemented")
}
func (UnimplementedCashierServiceServer) TrashedCashier(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedCashier not implemented")
}
func (UnimplementedCashierServiceServer) RestoreCashier(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCashier not implemented")
}
func (UnimplementedCashierServiceServer) DeleteCashierPermanent(context.Context, *FindByIdCashierRequest) (*ApiResponseCashierDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashierPermanent not implemented")
}
func (UnimplementedCashierServiceServer) RestoreAllCashier(context.Context, *emptypb.Empty) (*ApiResponseCashierAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllCashier not implemented")
}
func (UnimplementedCashierServiceServer) DeleteAllCashierPermanent(context.Context, *emptypb.Empty) (*ApiResponseCashierAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllCashierPermanent not implemented")
}
func (UnimplementedCashierServiceServer) mustEmbedUnimplementedCashierServiceServer() {}
func (UnimplementedCashierServiceServer) testEmbeddedByValue()                        {}

// UnsafeCashierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashierServiceServer will
// result in compilation errors.
type UnsafeCashierServiceServer interface {
	mustEmbedUnimplementedCashierServiceServer()
}

func RegisterCashierServiceServer(s grpc.ServiceRegistrar, srv CashierServiceServer) {
	// If the following call pancis, it indicates UnimplementedCashierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CashierService_ServiceDesc, srv)
}

func _CashierService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).FindAll(ctx, req.(*FindAllCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).FindById(ctx, req.(*FindByIdCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).FindByActive(ctx, req.(*FindAllCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).FindByTrashed(ctx, req.(*FindAllCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_FindByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByMerchantCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).FindByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_FindByMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).FindByMerchant(ctx, req.(*FindByMerchantCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_CreateCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).CreateCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_CreateCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).CreateCashier(ctx, req.(*CreateCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_UpdateCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).UpdateCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_UpdateCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).UpdateCashier(ctx, req.(*UpdateCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_TrashedCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).TrashedCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_TrashedCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).TrashedCashier(ctx, req.(*FindByIdCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_RestoreCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).RestoreCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_RestoreCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).RestoreCashier(ctx, req.(*FindByIdCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_DeleteCashierPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCashierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).DeleteCashierPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_DeleteCashierPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).DeleteCashierPermanent(ctx, req.(*FindByIdCashierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_RestoreAllCashier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).RestoreAllCashier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_RestoreAllCashier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).RestoreAllCashier(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashierService_DeleteAllCashierPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashierServiceServer).DeleteAllCashierPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashierService_DeleteAllCashierPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashierServiceServer).DeleteAllCashierPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CashierService_ServiceDesc is the grpc.ServiceDesc for CashierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CashierService",
	HandlerType: (*CashierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _CashierService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _CashierService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _CashierService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _CashierService_FindByTrashed_Handler,
		},
		{
			MethodName: "FindByMerchant",
			Handler:    _CashierService_FindByMerchant_Handler,
		},
		{
			MethodName: "CreateCashier",
			Handler:    _CashierService_CreateCashier_Handler,
		},
		{
			MethodName: "UpdateCashier",
			Handler:    _CashierService_UpdateCashier_Handler,
		},
		{
			MethodName: "TrashedCashier",
			Handler:    _CashierService_TrashedCashier_Handler,
		},
		{
			MethodName: "RestoreCashier",
			Handler:    _CashierService_RestoreCashier_Handler,
		},
		{
			MethodName: "DeleteCashierPermanent",
			Handler:    _CashierService_DeleteCashierPermanent_Handler,
		},
		{
			MethodName: "RestoreAllCashier",
			Handler:    _CashierService_RestoreAllCashier_Handler,
		},
		{
			MethodName: "DeleteAllCashierPermanent",
			Handler:    _CashierService_DeleteAllCashierPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cashier.proto",
}
