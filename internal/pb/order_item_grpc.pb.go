// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: order_item.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderItemService_FindAll_FullMethodName              = "/pb.OrderItemService/FindAll"
	OrderItemService_FindByActive_FullMethodName         = "/pb.OrderItemService/FindByActive"
	OrderItemService_FindByTrashed_FullMethodName        = "/pb.OrderItemService/FindByTrashed"
	OrderItemService_FindOrderItemByOrder_FullMethodName = "/pb.OrderItemService/FindOrderItemByOrder"
)

// OrderItemServiceClient is the client API for OrderItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemServiceClient interface {
	FindAll(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItem, error)
	FindByActive(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItemDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItemDeleteAt, error)
	FindOrderItemByOrder(ctx context.Context, in *FindByIdOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsesOrderItem, error)
}

type orderItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemServiceClient(cc grpc.ClientConnInterface) OrderItemServiceClient {
	return &orderItemServiceClient{cc}
}

func (c *orderItemServiceClient) FindAll(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrderItem)
	err := c.cc.Invoke(ctx, OrderItemService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) FindByActive(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItemDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrderItemDeleteAt)
	err := c.cc.Invoke(ctx, OrderItemService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) FindByTrashed(ctx context.Context, in *FindAllOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderItemDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrderItemDeleteAt)
	err := c.cc.Invoke(ctx, OrderItemService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) FindOrderItemByOrder(ctx context.Context, in *FindByIdOrderItemRequest, opts ...grpc.CallOption) (*ApiResponsesOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesOrderItem)
	err := c.cc.Invoke(ctx, OrderItemService_FindOrderItemByOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemServiceServer is the server API for OrderItemService service.
// All implementations must embed UnimplementedOrderItemServiceServer
// for forward compatibility.
type OrderItemServiceServer interface {
	FindAll(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItem, error)
	FindByActive(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItemDeleteAt, error)
	FindByTrashed(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItemDeleteAt, error)
	FindOrderItemByOrder(context.Context, *FindByIdOrderItemRequest) (*ApiResponsesOrderItem, error)
	mustEmbedUnimplementedOrderItemServiceServer()
}

// UnimplementedOrderItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderItemServiceServer struct{}

func (UnimplementedOrderItemServiceServer) FindAll(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedOrderItemServiceServer) FindByActive(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItemDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedOrderItemServiceServer) FindByTrashed(context.Context, *FindAllOrderItemRequest) (*ApiResponsePaginationOrderItemDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedOrderItemServiceServer) FindOrderItemByOrder(context.Context, *FindByIdOrderItemRequest) (*ApiResponsesOrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrderItemByOrder not implemented")
}
func (UnimplementedOrderItemServiceServer) mustEmbedUnimplementedOrderItemServiceServer() {}
func (UnimplementedOrderItemServiceServer) testEmbeddedByValue()                          {}

// UnsafeOrderItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemServiceServer will
// result in compilation errors.
type UnsafeOrderItemServiceServer interface {
	mustEmbedUnimplementedOrderItemServiceServer()
}

func RegisterOrderItemServiceServer(s grpc.ServiceRegistrar, srv OrderItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderItemService_ServiceDesc, srv)
}

func _OrderItemService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).FindAll(ctx, req.(*FindAllOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).FindByActive(ctx, req.(*FindAllOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).FindByTrashed(ctx, req.(*FindAllOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_FindOrderItemByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).FindOrderItemByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_FindOrderItemByOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).FindOrderItemByOrder(ctx, req.(*FindByIdOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemService_ServiceDesc is the grpc.ServiceDesc for OrderItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderItemService",
	HandlerType: (*OrderItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _OrderItemService_FindAll_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _OrderItemService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _OrderItemService_FindByTrashed_Handler,
		},
		{
			MethodName: "FindOrderItemByOrder",
			Handler:    _OrderItemService_FindOrderItemByOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_item.proto",
}
