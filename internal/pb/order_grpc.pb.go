// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_FindAll_FullMethodName                 = "/pb.OrderService/FindAll"
	OrderService_FindById_FullMethodName                = "/pb.OrderService/FindById"
	OrderService_FindByActive_FullMethodName            = "/pb.OrderService/FindByActive"
	OrderService_FindByTrashed_FullMethodName           = "/pb.OrderService/FindByTrashed"
	OrderService_Create_FullMethodName                  = "/pb.OrderService/Create"
	OrderService_Update_FullMethodName                  = "/pb.OrderService/Update"
	OrderService_TrashedOrder_FullMethodName            = "/pb.OrderService/TrashedOrder"
	OrderService_RestoreOrder_FullMethodName            = "/pb.OrderService/RestoreOrder"
	OrderService_DeleteOrderPermanent_FullMethodName    = "/pb.OrderService/DeleteOrderPermanent"
	OrderService_RestoreAllOrder_FullMethodName         = "/pb.OrderService/RestoreAllOrder"
	OrderService_DeleteAllOrderPermanent_FullMethodName = "/pb.OrderService/DeleteAllOrderPermanent"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	FindAll(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrder, error)
	FindById(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error)
	FindByActive(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderDeleteAt, error)
	Create(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error)
	Update(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error)
	TrashedOrder(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDeleteAt, error)
	RestoreOrder(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDeleteAt, error)
	DeleteOrderPermanent(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDelete, error)
	RestoreAllOrder(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseOrderAll, error)
	DeleteAllOrderPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseOrderAll, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) FindAll(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrder)
	err := c.cc.Invoke(ctx, OrderService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindById(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrder)
	err := c.cc.Invoke(ctx, OrderService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindByActive(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrderDeleteAt)
	err := c.cc.Invoke(ctx, OrderService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindByTrashed(ctx context.Context, in *FindAllOrderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationOrderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationOrderDeleteAt)
	err := c.cc.Invoke(ctx, OrderService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Create(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrder)
	err := c.cc.Invoke(ctx, OrderService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Update(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrder)
	err := c.cc.Invoke(ctx, OrderService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TrashedOrder(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrderDeleteAt)
	err := c.cc.Invoke(ctx, OrderService_TrashedOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RestoreOrder(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrderDeleteAt)
	err := c.cc.Invoke(ctx, OrderService_RestoreOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOrderPermanent(ctx context.Context, in *FindByIdOrderRequest, opts ...grpc.CallOption) (*ApiResponseOrderDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrderDelete)
	err := c.cc.Invoke(ctx, OrderService_DeleteOrderPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RestoreAllOrder(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseOrderAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrderAll)
	err := c.cc.Invoke(ctx, OrderService_RestoreAllOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteAllOrderPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseOrderAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseOrderAll)
	err := c.cc.Invoke(ctx, OrderService_DeleteAllOrderPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	FindAll(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrder, error)
	FindById(context.Context, *FindByIdOrderRequest) (*ApiResponseOrder, error)
	FindByActive(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrderDeleteAt, error)
	FindByTrashed(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrderDeleteAt, error)
	Create(context.Context, *CreateOrderRequest) (*ApiResponseOrder, error)
	Update(context.Context, *UpdateOrderRequest) (*ApiResponseOrder, error)
	TrashedOrder(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDeleteAt, error)
	RestoreOrder(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDeleteAt, error)
	DeleteOrderPermanent(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDelete, error)
	RestoreAllOrder(context.Context, *emptypb.Empty) (*ApiResponseOrderAll, error)
	DeleteAllOrderPermanent(context.Context, *emptypb.Empty) (*ApiResponseOrderAll, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) FindAll(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedOrderServiceServer) FindById(context.Context, *FindByIdOrderRequest) (*ApiResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedOrderServiceServer) FindByActive(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedOrderServiceServer) FindByTrashed(context.Context, *FindAllOrderRequest) (*ApiResponsePaginationOrderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedOrderServiceServer) Create(context.Context, *CreateOrderRequest) (*ApiResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderServiceServer) Update(context.Context, *UpdateOrderRequest) (*ApiResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderServiceServer) TrashedOrder(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedOrder not implemented")
}
func (UnimplementedOrderServiceServer) RestoreOrder(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOrder not implemented")
}
func (UnimplementedOrderServiceServer) DeleteOrderPermanent(context.Context, *FindByIdOrderRequest) (*ApiResponseOrderDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderPermanent not implemented")
}
func (UnimplementedOrderServiceServer) RestoreAllOrder(context.Context, *emptypb.Empty) (*ApiResponseOrderAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllOrder not implemented")
}
func (UnimplementedOrderServiceServer) DeleteAllOrderPermanent(context.Context, *emptypb.Empty) (*ApiResponseOrderAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllOrderPermanent not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindAll(ctx, req.(*FindAllOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindById(ctx, req.(*FindByIdOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindByActive(ctx, req.(*FindAllOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindByTrashed(ctx, req.(*FindAllOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Create(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Update(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TrashedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TrashedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TrashedOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TrashedOrder(ctx, req.(*FindByIdOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RestoreOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RestoreOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RestoreOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RestoreOrder(ctx, req.(*FindByIdOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOrderPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOrderPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteOrderPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOrderPermanent(ctx, req.(*FindByIdOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RestoreAllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RestoreAllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RestoreAllOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RestoreAllOrder(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteAllOrderPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteAllOrderPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteAllOrderPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteAllOrderPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _OrderService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _OrderService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _OrderService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _OrderService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrderService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderService_Update_Handler,
		},
		{
			MethodName: "TrashedOrder",
			Handler:    _OrderService_TrashedOrder_Handler,
		},
		{
			MethodName: "RestoreOrder",
			Handler:    _OrderService_RestoreOrder_Handler,
		},
		{
			MethodName: "DeleteOrderPermanent",
			Handler:    _OrderService_DeleteOrderPermanent_Handler,
		},
		{
			MethodName: "RestoreAllOrder",
			Handler:    _OrderService_RestoreAllOrder_Handler,
		},
		{
			MethodName: "DeleteAllOrderPermanent",
			Handler:    _OrderService_DeleteAllOrderPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
